as.factor
colData(pe)$tissue <- substr(
colnames(pe[["peptideRaw"]]),
12,
12) %>%
unlist %>%
as.factor
colData(pe)$patient <- substr(
colnames(pe[["peptideRaw"]]),
13,
13) %>%
unlist %>%
as.factor
```{r}
rowData(pe[["peptideRaw"]])$nNonZero <- rowSums(assay(pe[["peptideRaw"]]) > 0)
pe <- zeroIsNA(pe, "peptideRaw") # convert 0 to NA
MSnbase::plotNA(assay(pe[["peptideRaw"]])) +
xlab("Peptide index (ordered by data completeness)")
pe <- logTransform(pe, base = 2, i = "peptideRaw", name = "peptideLog")
limma::plotDensities(assay(pe[["peptideLog"]]))
pe[["peptideLog"]] <-
pe[["peptideLog"]][rowData(pe[["peptideLog"]])$Proteins
%in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins),]
pe[["peptideLog"]] %>%
rowData %>%
names
pe[["peptideLog"]] <- pe[["peptideLog"]][rowData(pe[["peptideLog"]])$
Potential.contaminant != "+", ]
pe[["peptideLog"]] <- pe[["peptideLog"]][rowData(pe[["peptideLog"]])$nNonZero >= 2, ]
nrow(pe[["peptideLog"]])
pe <- normalize(pe, i = "peptideLog", method = "quantiles", name = "peptideNorm")
limma::plotDensities(assay(pe[["peptideNorm"]]))
boxplot(assay(pe[["peptideNorm"]]), col = palette()[-1],
main = "Peptide distribtutions after normalisation", ylab = "intensity")
limma::plotMDS(assay(pe[["peptideNorm"]]),
col = colData(pe)$location:colData(pe)$tissue %>%
as.numeric,
labels = colData(pe) %>%
rownames %>%
substr(start = 11, stop = 13)
)
pe <- aggregateFeatures(pe,
i = "peptideNorm",
fcol = "Proteins",
na.rm = TRUE,
name = "proteinRobust",
fun = MsCoreUtils::robustSummary)
plotMDS(assay(pe[["proteinRobust"]]),
col = colData(pe)$location:colData(pe)$tissue %>%
as.numeric,
labels = colData(pe) %>%
rownames %>%
substr(start = 11, stop = 13)
)
pe <- msqrob(
object = pe,
i = "proteinRobust",
formula = ~ location*tissue + patient)
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[2]])
L <- makeContrast(
c(
"tissueV = 0",
"tissueV + locationR:tissueV = 0",
"tissueV + 0.5*locationR:tissueV = 0","locationR:tissueV = 0"),
parameterNames =
rowData(pe[["proteinRobust"]])$msqrobModels[[2]] %>%
getCoef %>%
names
)
pe <- omnibusTest(pe, "proteinRobust", L)
source("https://raw.githubusercontent.com/statOmics/SGA2020/gh-pages/assets/topFeaturesOmnibus.R")
pe <- omnibusTest(pe, "proteinRobust", L)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
pe <- omnibusTest(pe, "proteinRobust", L)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
pe <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L, overwrite=TRUE)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
pe <- omnibusTest(object = pe, "proteinRobust", L, overwrite =TRUE)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
source("https://raw.githubusercontent.com/statOmics/SGA2020/gh-pages/assets/topFeaturesOmnibus.R")
pe <- omnibusTest(object = pe, "proteinRobust", L, overwrite =TRUE)
pe2 <- omnibusTest(object = pe, "proteinRobust", L, overwrite =TRUE)
rowData(pe[["proteinRobust"]])$omnibusTest
colnames(rowData(pe[["proteinRobust"]])$omnibusTest)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$omnibusTest$tissueV+locationR.tissueV,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$omnibusTest,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$omnibusTest,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
rowData(pe[["proteinRobust"]])$omnibusTest
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.)
pe2 <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L, overwrite=TRUE)
sigNamesLeft <- rowData(pe[["proteinRobust"]])$tissueV %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$tissueV %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibustest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$tissueV %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
rowData(pe[["proteinRobust"]])$omnibusTest
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
dim()
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
dim(.)
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
length(.)
rowData(pe[["proteinRobust"]])$tissueV %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
length(.)
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
length(.)
```{r,warning=FALSE}
X <- model.matrix(~ location*tissue + patient, colData(pe))
covarUnscaled <- solve(t(X) %*% X)
varContrasts <- t(L)%*%covarUnscaled%*%L %>%
diag
varContrasts
sqrt(varContrasts)
X
27/64
0.25*0.25*0.25
1/64
0.75*0.75*0.75
2*4*2*4*4
2*4*2*4*2
97+48
## Load packages
library(affy)
library(arrayQualityMetrics)
library(ArrayExpress)
library(limma)
library(siggenes)
setwd("~/Documents/Bioinformatics/project AHATA")
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/practicum")
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA")
## Load packages
library(affy)
library(arrayQualityMetrics)
library(ArrayExpress)
library(limma)
library(siggenes)
BiocManager::install("siggenes",update=F)
library(siggenes)
# load in the expressionFeatureSet object
BreastCancer <- ArrayExpress("E-GEOD-15852")
BreastCancer
# exprs functions returns the intensity values for each sample (column)
exprs(BreastCancer)
#pData returns the phenotypic data we loaded using ReadAffy
pData(BreastCancer)
## Reads in all .cel files and takes phenoData from the ExpressionFeatureset we loaded using https_ArrayExpress
BreastCancer <- ReadAffy(phenoData=pData(BreastCancer))
#pData returns the phenotypic data we loaded using ReadAffy
pData(BreastCancer)
## Have a look to the data you just loaded
head(exprs(BreastCancer))
# Preprocessing of the data
# rma function is used to perform background correction as well as quantile normalization
BreastCancerRMA<- affy::rma(BreastCancer,background=T)
# Preprocessing of the data
# rma function is used to perform background correction as well as quantile normalization
BreastCancerRMA<- affy::rma(BreastCancer,background=T)
## Quality Control on preprocessed data
## QC post preprocessing
arrayQualityMetrics(BreastCancerRMA,outdir="/Users/tristanvanneste/Documents/Bioinformatics/project Tristan/RMA",force=T)  			#RMA produces log-transformed data
head(pData(MouseRMA))
head(pData(BreastCancerRMA))
## Load in the data
MouseExp <- ArrayExpress("E-MTAB-3242")
pData(MouseExp)
pData(MouseRMA)[,22]
## RMA
MouseRMA<- affy::rma(MouseExp,background=T)
## Reads in all .cel files and takes phenoData from the ExpressionFeatureset we loaded using https_ArrayExpress
MouseExp <- ReadAffy(phenoData=pData(MouseExp))
## Have a look to the data you just loaded
head(exprs(MouseExp))
pData(MouseExp)
## RMA
MouseRMA<- affy::rma(MouseExp,background=T)
## RMA
MouseRMA<- affy::rma(MouseExp,background=T)
MouseExp
## Reads in all .cel files and takes phenoData from the ExpressionFeatureset we loaded using https_ArrayExpress
MouseExp <- ReadAffy(phenoData=pData(MouseExp))
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/practicum")
## Reads in all .cel files and takes phenoData from the ExpressionFeatureset we loaded using https_ArrayExpress
MouseExp <- ReadAffy(phenoData=pData(MouseExp))
## RMA
MouseRMA<- affy::rma(MouseExp,background=T)
annot <- factor(pData(MouseRMA)[,22])
annot
pData(MouseRMA)[,22]
pData(MouseRMA)
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA")
# now can perform SAM or LIMMA to get the differentially expressed genes
#SAM
head(pData(BreastCancerRMA))
pData(BreastCancerRMA)$Sample_source_name
pData(BreastCancerRMA)[,7]
annot <- factor(pData(BreastCancerRMA)[,7]) # normal breast tissue and breast tumor tissue
annot
dim(annot)
length(annot)
## Differential expression by SAM
annotb <- as.double(annot==annot[1])
annotb
annot <- factor(pData(BreastCancerRMA)[,7]) # normal breast tissue and breast tumor tissue
## Differential expression by SAM
annotb <- as.double(annot==annot[4])
annotb
annot
sam.out_RMA <- sam(exprs(BreastCancerRMA),annotb)
sam.out_RMA
summary(sam.out_RMA,3.1)
summary(sam.out_RMA,3.8)
# 559 identified genes with 0.03 falsely called genes or FDR of  2.95e-05
summary(sam.out_RMA,3.8)
# now can perform SAM or LIMMA to get the differentially expressed genes
#SAM
head(pData(BreastCancerRMA))
head(pData(BreastCancerRMA))
pData(BreastCancerRMA)[hybridizations()]
pData(BreastCancerRMA)[Hybridization.Name]
pData(BreastCancerRMA)$Hybridization.Name
grepl('BC0117N',pData(BreastCancerRMA)$Hybridization.Name)
sum(grepl('BC0117N',pData(BreastCancerRMA)$Hybridization.Name))
sum(grepl('BC0117',pData(BreastCancerRMA)$Hybridization.Name))
pData(BreastCancerRMA)$Name)
pData(BreastCancerRMA)$Name
# 273 identified genes with 0 FDR and 0 falsely called genes
# the problem is we don't account for the persons
pData(BreastCancerRMA)$Patients<- pData(BreastCancerRMA)$Hybridization.Name
# now can perform SAM or LIMMA to get the differentially expressed genes
#SAM
head(pData(BreastCancerRMA))
pData(BreastCancerRMA)$Patients
pData(BreastCancerRMA)$Patients <- gsub('Normal', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients <- gsub('Cancer', '',pData(BreastCancerRMA)$Patients)
head(pData(BreastCancerRMA$Patients))
pData(BreastCancerRMA$Patients)
pData(BreastCancerRMA)$Patients
pData(BreastCancerRMA)$Patients <- gsub('T', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients <- gsub('N', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients
pData(BreastCancerRMA)$Patients <- gsub(' ', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients
sum(grepl('BC0155', pData(BreastCancerRMA)$Patients))
sum(grepl('BC0117', pData(BreastCancerRMA)$Patients))
?sam
## Differential expression by LIMMA
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~0+annot)
design
## Differential expression by LIMMA
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~0+annotb)
design
## Differential expression by LIMMA
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~annotb)
design
## Differential expression by LIMMA
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~annotb+BreastCancerRMA)$Patients)
## Differential expression by LIMMA
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~annotb+pData(BreastCancerRMA)$Patients)
design
ID <- factor(pData(BreastCancerRMA)$Patients)
ID
length(ID)
## Differential expression by LIMMA
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~annotb+ID)
design
setwd("~/Documents/Bioinformatics/Statistical genomics")
library(tidyverse)
library(limma)
library(QFeatures)
library(QFeatures)
library(msqrob2)
library(plotly)
peptidesFile <- "https://raw.githubusercontent.com/statOmics/SGA2020/data/quantification/heart/peptides.txt"
ecols <- MSnbase::grepEcols(
peptidesFile,
"Intensity ",
split = "\t")
ecols <- MSnbase::grepEcols(
peptidesFile,
"Intensity ",
split = "\t")
pe <- readQFeatures(
table = peptidesFile,
fnames = 1,
ecol = ecols,
name = "peptideRaw", sep="\t")
pe
pe[["peptideRaw"]]
colData(pe)$location <- substr(
colnames(pe[["peptideRaw"]]),
11,
11) %>%
unlist %>%
as.factor
colData(pe)$tissue <- substr(
colnames(pe[["peptideRaw"]]),
12,
12) %>%
unlist %>%
as.factor
colData(pe)$patient <- substr(
colnames(pe[["peptideRaw"]]),
13,
13) %>%
unlist %>%
as.factor
colData(pe)$patient
limma::plotDensities(exprs(BreastCancer))
limma::plotDensities(exprs(BreastCancerRMA))
## Reads in all .cel files and takes phenoData from the ExpressionFeatureset we loaded using https_ArrayExpress
BreastCancer <- ReadAffy(phenoData=pData(BreastCancer))
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis")
# the design matrix (additive linear model with patient as the blocking factor)
Patient <- factor(c('A','B','C','A','B','C'))
Tissue <- factor(c("control","control","control","tumour","tumour","tumour"))
design <- model.matrix(~Patient+Tissue)
design
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA")
## Differential expression by LIMMA
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~0+annotb)
design
colnames(design)<-c("KD","WT")
colnames(design)<-c("Tissue")
design
fit <- lmFit(BreastCancerRMA,design)
annotb
annot
## Differential expression by LIMMA
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~0+annot)
design
colnames(design)<-c("Cancer breast tissue","normal breast tissue")
design
fit <- lmFit(BreastCancerRMA,design)
cont.matrix <- makeContrasts(NvsS=Cancer breast tissue-normal breast tissue,levels=design)
cont.matrix <- makeContrasts(NvsS='Cancer breast tissue'-'normal breast tissue',levels=design)
colnames(design)<-c("Cancer_breast_tissue","normal_breast_tissue")
fit <- lmFit(BreastCancerRMA,design)
cont.matrix <- makeContrasts(NvsS=Cancer_breast_tissue-normal_breast_tissue,levels=design)
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
volcanoplot(fit2)
limma::plotMA(fit2)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(MouseRMA)))
head(LIMMAout)
p
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(MouseRMA)))
head(LIMMAout)
# 559 identified genes with 0.03 falsely called genes or FDR of  2.95e-05
summary(sam.out_RMA,3.8)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(BreastCancerRMA)))
head(LIMMAout)
# 559 identified genes with 0.03 falsely called genes or FDR of  2.95e-05
summary(sam.out_RMA,3.8)
## Check intensity values for top results
exprs(BreastCancerRMA)[rownames(exprs(BreastCancerRMA))%in%rownames(head(LIMMAout)),]
rowMeans(exprs(BreastCancerRMA)[rownames(exprs(BreastCancerRMA))%in%rownames(head(LIMMAout)),c(1,6,7)])
rowMeans(exprs(BreastCancerRMA)[rownames(exprs(BreastCancerRMA))%in%rownames(head(LIMMAout)),2:5])
rowMeans(exprs(BreastCancerRMA)[rownames(exprs(BreastCancerRMA))%in%rownames(head(LIMMAout)),1:5])
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t")
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t",fill=T)
print(head(annotation_BC))
annotation_BC <- annotation_BC[sort(annotation_BC$Composite.Element.Name,index.return=T)$ix,]
annotation_BC$Composite.Element.Name
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t",fill=T)
annotation_BC <- annotation_BC[sort(annotation_BC$Composite.Element.Name,index.return=T)$ix,]
annotation_BC <- annotation_BC[sort(annotation_BC$Composite.Element.Name,index.return=T)$ix,]
print(head(annotation_BC))
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t")
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t",skip=16)
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t",fill=T)
print(head(annotation_BC))
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/practicum")
## Load annotation and sort alphabetically on probe name
annotation_MA <- read.table("A-AFFY-45.adf.txt",header=T,sep="\t",skip=17,fill=T)
print(head(annotation_MA))
annotation_MA <- annotation_MA[sort(annotation_MA$Composite.Element.Name,index.return=T)$ix,]
print(head(annotation_MA))
## Check if all probes are present in both sets
dim(annotation_MA)
dim(LIMMAout_RMA)
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA")
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t",skip=17,fill=T)
print(head(annotation_BC))
annotation_BC <- annotation_BC[sort(annotation_BC$Composite.Element.Name,index.return=T)$ix,]
annotation_BC
## Check if all probes are present in both sets
dim(annotation_BC)
dim(LIMMAout_RMA)
dim(LIMMAout)
## Double check => "Assumption is the mother of all fuck up's ;)"
sum(annotation_BC$Composite.Element.Name==sort(rownames(LIMMAout)))
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(rownames(LIMMAout),index.return=T)$ix,]
## Add gene names to LIMMA output
LIMMAout_sorted$gene <- annotation_BC$Composite.Element.Database.Entry.ensembl.
LIMMAout_annot <- LIMMAout_sorted[sort(LIMMAout_sorted$adj.P.Val,index.return=T)$ix,]
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
sum(table(l*))
sum(table(l*))
sum(table(l*)
sum(table(l*))
table(l*)
table(l)
LIMMAout_annot[LIMMAout_annot$gene=="ENSG00000119888",]
