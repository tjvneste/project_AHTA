heatmap.2(geneExpression[idx,],trace="none",labCol=sampleInfo$group)
set.seed(17)
m = nrow(geneExpression)
n = ncol(geneExpression)
x = matrix(rnorm(m*n),m,n)
g = factor(sampleInfo$g )
?rowttest
install.packages("DescTools")
BiocManager::install("remotes")
library('remotes')
BiocManager::install("rformassspectrometry/MsCoreUtils")
BiocManager::install("rformassspectrometry/MsCoreUtils")
BiocManager::install("rformassspectrometry/MsCoreUtils")
library('rformassspectrometry/MsCoreUtils')
library('MsCoreUtils')
BiocManager::install("rformassspectrometry/QFeatures")
library('remotes')
library('MsCoreUtils')
BiocManager::install("rformassspectrometry/MsCoreUtils")
library('MsCoreUtils')
BiocManager::install("rformassspectrometry/QFeatures")
BiocManager::install("rformassspectrometry/QFeatures")
BiocManager::install("statomics/msqrob2")
library('statomics/msqrob2')
library('msqrob2')
version
library(tidyverse)
library(tidyverse)
library(limma)
library(QFeatures)
library(QFeatures)
library(msqrob2)
library(QFeatures)
library(msqrob2)
library(plotly)
peptidesFile <- "https://raw.githubusercontent.com/statOmics/SGA2020/data/quantification/heart/peptides.txt"
ecols <- MSnbase::grepEcols(
peptidesFile,
"Intensity ",
split = "\t")
pe <- readQFeatures(
table = peptidesFile,
fnames = 1,
ecol = ecols,
name = "peptideRaw", sep="\t")
pe <- readQFeatures(
table = peptidesFile,
fnames = 1,
ecol = ecols,
name = "peptideRaw", sep="\t")
pe
pe[["peptideRaw"]]
colData(pe)$location <- substr(
colnames(pe[["peptideRaw"]]),
11,
11) %>%
unlist %>%
as.factor
colData(pe)$tissue <- substr(
colnames(pe[["peptideRaw"]]),
12,
12) %>%
unlist %>%
as.factor
colData(pe)$patient <- substr(
colnames(pe[["peptideRaw"]]),
13,
13) %>%
unlist %>%
as.factor
```{r}
rowData(pe[["peptideRaw"]])$nNonZero <- rowSums(assay(pe[["peptideRaw"]]) > 0)
pe <- zeroIsNA(pe, "peptideRaw") # convert 0 to NA
MSnbase::plotNA(assay(pe[["peptideRaw"]])) +
xlab("Peptide index (ordered by data completeness)")
pe <- logTransform(pe, base = 2, i = "peptideRaw", name = "peptideLog")
limma::plotDensities(assay(pe[["peptideLog"]]))
pe[["peptideLog"]] <-
pe[["peptideLog"]][rowData(pe[["peptideLog"]])$Proteins
%in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins),]
pe[["peptideLog"]] %>%
rowData %>%
names
pe[["peptideLog"]] <- pe[["peptideLog"]][rowData(pe[["peptideLog"]])$
Potential.contaminant != "+", ]
pe[["peptideLog"]] <- pe[["peptideLog"]][rowData(pe[["peptideLog"]])$nNonZero >= 2, ]
nrow(pe[["peptideLog"]])
pe <- normalize(pe, i = "peptideLog", method = "quantiles", name = "peptideNorm")
limma::plotDensities(assay(pe[["peptideNorm"]]))
boxplot(assay(pe[["peptideNorm"]]), col = palette()[-1],
main = "Peptide distribtutions after normalisation", ylab = "intensity")
limma::plotMDS(assay(pe[["peptideNorm"]]),
col = colData(pe)$location:colData(pe)$tissue %>%
as.numeric,
labels = colData(pe) %>%
rownames %>%
substr(start = 11, stop = 13)
)
pe <- aggregateFeatures(pe,
i = "peptideNorm",
fcol = "Proteins",
na.rm = TRUE,
name = "proteinRobust",
fun = MsCoreUtils::robustSummary)
plotMDS(assay(pe[["proteinRobust"]]),
col = colData(pe)$location:colData(pe)$tissue %>%
as.numeric,
labels = colData(pe) %>%
rownames %>%
substr(start = 11, stop = 13)
)
pe <- msqrob(
object = pe,
i = "proteinRobust",
formula = ~ location*tissue + patient)
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[2]])
L <- makeContrast(
c(
"tissueV = 0",
"tissueV + locationR:tissueV = 0",
"tissueV + 0.5*locationR:tissueV = 0","locationR:tissueV = 0"),
parameterNames =
rowData(pe[["proteinRobust"]])$msqrobModels[[2]] %>%
getCoef %>%
names
)
pe <- omnibusTest(pe, "proteinRobust", L)
source("https://raw.githubusercontent.com/statOmics/SGA2020/gh-pages/assets/topFeaturesOmnibus.R")
pe <- omnibusTest(pe, "proteinRobust", L)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
pe <- omnibusTest(pe, "proteinRobust", L)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
pe <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L, overwrite=TRUE)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
pe <- omnibusTest(object = pe, "proteinRobust", L, overwrite =TRUE)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
source("https://raw.githubusercontent.com/statOmics/SGA2020/gh-pages/assets/topFeaturesOmnibus.R")
pe <- omnibusTest(object = pe, "proteinRobust", L, overwrite =TRUE)
pe2 <- omnibusTest(object = pe, "proteinRobust", L, overwrite =TRUE)
rowData(pe[["proteinRobust"]])$omnibusTest
colnames(rowData(pe[["proteinRobust"]])$omnibusTest)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$omnibusTest$tissueV+locationR.tissueV,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$omnibusTest,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$omnibusTest,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
rowData(pe[["proteinRobust"]])$omnibusTest
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.)
pe2 <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L, overwrite=TRUE)
sigNamesLeft <- rowData(pe[["proteinRobust"]])$tissueV %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$tissueV %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibustest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$tissueV %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
rowData(pe[["proteinRobust"]])$omnibusTest
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
dim()
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
dim(.)
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
length(.)
rowData(pe[["proteinRobust"]])$tissueV %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
length(.)
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
length(.)
```{r,warning=FALSE}
X <- model.matrix(~ location*tissue + patient, colData(pe))
covarUnscaled <- solve(t(X) %*% X)
varContrasts <- t(L)%*%covarUnscaled%*%L %>%
diag
varContrasts
sqrt(varContrasts)
X
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA")
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA")
#BiocManager::install("agilp")
library("ArrayExpress")
library("limma")
library("arrayQualityMetrics")
#BiocManager::install("agilp")
BiocManager::install("ArrayExpress")
library("ArrayExpress")
BiocManager::install("arrayQualityMetrics")
library("arrayQualityMetrics")
library("limma")
getAE("E-GEOD-45666")
# limma package, zal wss beter lukken dan agilp
targets <- readTargets("Targets.txt")
targets
2+2
dim(targets)
summary(targets$DiseaseStatus)
targets$DiseaseStatus<- as.factor(targets$DiseaseStatus)
targets$DiseaseStatus
2+2
summary(targets$DiseaseStatus)
x <- read.maimages(targets$FileName, source="agilent", green.only=TRUE)
x
targets
dim(targets)
head(targets)
# limma package, zal wss beter lukken dan agilp
targets <- readTargets("Targets.txt")
head(targets)
targets[1,2]
targets[1,1]
x
targets$DiseaseStatus<- as.factor(targets$DiseaseStatus)
summary(targets$DiseaseStatus)
targets
dim(x)
# Om annotatie te laden, de correcte array moet wel ingevuld worden
require(biomaRt)
BiocManager::install("biomaRt")
# Om annotatie te laden, de correcte array moet wel ingevuld worden
require(biomaRt)
mart <- useMart('ENSEMBL_MART_ENSEMBL')
mart <- useDataset('hsapiens_gene_ensembl', mart)
annotLookup <- getBM(
mart = mart,
attributes = c(
'Agilent-021827 Human miRNA Microarray G4470C',
'wikigene_description',
'ensembl_gene_id',
'entrezgene',
'gene_biotype',
'external_gene_name'))
annotLookup <- getBM(
mart = mart,
attributes = c(
'Agilent-021827_Human_miRNA_Microarray_G4470C',
'wikigene_description',
'ensembl_gene_id',
'entrezgene',
'gene_biotype',
'external_gene_name'))
annotLookup <- getBM(
mart = mart,
attributes = c(
'Agilent_021827_Human_miRNA_Microarray_G4470C',
'wikigene_description',
'ensembl_gene_id',
'entrezgene',
'gene_biotype',
'external_gene_name'))
listMarts()
datasets <- listDatasets(ensembl)
head(datasets)
mart
listAttributes
listAttributes(ensembl)
listAttributes(mart)
listAttributes(mart)==wikigene_description
listAttributes(mart)=='wikigene_description'
listAttributes(mart)[listAttributes(mart)=='wikigene_description']
listAttributes(mart)[listAttributes(mart)=='ensembl_gene_id']
listAttributes(mart)[listAttributes(mart)=='entrezgene']
listAttributes(mart)[listAttributes(mart)=='gene_biotype']
listAttributes(mart)[listAttributes(mart)=='external_gene_name']
listAttributes(mart)[listAttributes(mart)=='Agilent-021827_Human_miRNA_Microarray_G4470C']
listAttributes(mart)[listAttributes(mart)=='Agilent-021827 Human_miRNA Microarray G4470C']
listAttributes(mart)[listAttributes(mart)=='Agilent_021827_Human_miRNA_Microarray_G4470C']
x
mart <- useMart('ENSEMBL_MART_ENSEMBL')
mart <- useDataset('hsapiens_gene_ensembl', mart)
listFilters(mart)
annotLookup <- getBM(
mart = mart,
attributes = c(
'wikigene_description',
'ensembl_gene_id',
'gene_biotype',
'external_gene_name'))
annotLookup
#getAE("E-GEOD-45666")
BreastCancer_exprArray_AE <- ArrayExpress("E-GEOD-45666")
# Load in the Affybatch object
BreastCancer_exprArray <- ReadAffy(phenoData=pData(BreastCancer_exprArray_AE))
BreastCancer_exprArray_AE
BiocManager::install("ReadAffy")
library("ReadAffy")
BiocManager::install("affy")
library("affy")
# Load in the Affybatch object
BreastCancer_exprArray <- ReadAffy(phenoData=pData(BreastCancer_exprArray_AE))
BreastCancer_exprArray_AE
phenoData=pData(BreastCancer_exprArray_AE)
phenoData
phenoData=pData(BreastCancer_exprArray_AE)
# Load in the Affybatch object
BreastCancer_exprArray <- ReadAffy(phenoData=pData(BreastCancer_exprArray_AE))
targets
BreastCancer_exprArray_AE
BreastCancer_exprArray_AE$phenoData
BreastCancer_exprArray_AE[[phenoData]]
BreastCancer_exprArray_AE[phenoData]
BreastCancer_exprArray_AE[,phenoData]
BreastCancer_exprArray_AE[[,phenoData]]
## Load in the data
MouseExp <- ArrayExpress("E-MTAB-3242")
MouseExp
BreastCancer_exprArray_AE
## Download data to your working directory
getAE("E-MTAB-3242")
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/practicum")
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/practicum")
## Download data to your working directory
getAE("E-MTAB-3242")
## Reads in all .cel files and takes phenoData from the ExpressionFeatureset we loaded using https_ArrayExpress
MouseExp <- ReadAffy(phenoData=pData(MouseExp))
## Have a look to the data you just loaded
head(exprs(MouseExp))
pData(MouseExp)
BreastCancer <- ArrayExpress("E-GEOD-45666")
getAE("E-GEOD-45666")
BreastCancer <- ReadAffy(phenoData=pData(BreastCancer))
BreastCancer <- ReadAffy(phenoData2=pData(BreastCancer))
BreastCancer
head(BreastCancer)
head(exprs(BreastCancer)
)
MouseExp
2+2
BreastCancer
targetinfo <- readTargets('Targets.txt', sep = '\t')
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA") # Tristan
targetinfo <- readTargets('Targets.txt', sep = '\t')
targetinfo
# Converts the data to a RGList (two-colour [red-green] array), with values for R, Rg, G, Gb
project <- read.maimages(targetinfo, source = 'agilent')
targetinfo <- readTargets('Targets.txt', header=T,sep = '\t')
?readTargets
targetinfo <- readTargets('Targets.txt', header=T,sep = '\t',quote ="")
targetinfo <- readTargets('Targets.txt',sep = '\t',quote ="")
targetinfo
head(targetinfo)
# Load in the Affybatch object
BreastCancer_exprArray <- ReadAffy(phenoData=pData(BreastCancer_exprArray_AE))
# load in the expressionFeatureSet object
BreastCancer_exprArray_AE <- ArrayExpress("E-GEOD-45666")
BreastCancer_exprArray_AE
BreastCancer_exprArray_AE[phenoData]
BreastCancer_exprArray_AE[phenoData,]
BreastCancer_exprArray_AE[:,phenoData]
BreastCancer_exprArray_AE[,phenoData]
BreastCancer_exprArray_AE[phenoData]
BreastCancer_exprArray_AE$phenoData
rownames(BreastCancer_exprArray_AE$phenoData)
pData(BreastCancer_exprArray_AE)
dim(pData(BreastCancer_exprArray_AE))
# Load in the Affybatch object
BreastCancer_exprArray <- ReadAffy(phenoData=pData(BreastCancer_exprArray_AE))
phenoData
dim(phenoData)
# Load in the Affybatch object
BreastCancer_exprArray <- ReadAffy(phenoData=pData(BreastCancer_exprArray_AE))
AnnotatedDataFrame
# limma package, zal wss beter lukken dan agilp
targets <- readTargets("Targets.txt")
head(targets)
targets$DiseaseStatus<- as.factor(targets$DiseaseStatus)
summary(targets$DiseaseStatus)
x <- read.maimages(targets$FileName, source="agilent", green.only=TRUE)
dim(x)
# Load in the Affybatch object
BreastCancer_exprArray <- ReadAffy(phenoData=pData(x))
head(x)
dim(x$E)
dim(x$Eb)
x$Eb
x$E
x$Eb
dim(x$Eb)
MouseExp
BreastCancer_exprArray_AE
# Load in the Affybatch object
BreastCancer_exprArray <- ReadAffy(phenoData=pData(BreastCancer_exprArray_AE))
rownames(phenoData)
list.celfiles()
list.celfiles()
# Load in the Affybatch object
BreastCancer_exprArray <- ReadAffy(phenoData=pData(BreastCancer_exprArray_AE))
rownames(phenoData)
rownames(MouseExp)
BiocManager::install("GEOquery")
library("GEOquery")
#download the data to your working directory
gds <- getGEO("GSE45666")
gds
# Look at gsm metadata:
head(Meta(gsm))
# Look at gsm metadata:
head(Meta(gds))
# Look at gsm metadata:
head(gds)
Table(gsm)[1:5,]
Table(gds)[1:5,]
columns(gds)
Columns(gds)
GSE45666 <- getGEO('GSE45666',GSEMatrix=TRUE)
show(GSE45666)
gds
pData(phenoData(gds))
eset <- GDS2eSet(gds,do.log2=TRUE)
gds
gds
eset <- GDS2eSet(gds,do.log2=TRUE)
gsm <- getGEO(filename=system.file("GSE45666",package="GEOquery"))
gsm <- getGEO(filename="GSE45666",package="GEOquery"))
gsm <- getGEO(filename="GSE45666_RAW",package="GEOquery"))
gsm <- getGEO(filename="GSE45666_RAW",package="GEOquery")
gsm <- getGEO(filename="GSE45666_RAW")
gds``
gds
pData(gds)
x
## Reads in all .cel files and takes phenoData from the ExpressionFeatureset we loaded using https_ArrayExpress
MouseExp <- ReadAffy(phenoData=pData(MouseExp))
## Have a look to the data you just loaded
head(exprs(MouseExp))
pData(MouseExp)
MouseExp
