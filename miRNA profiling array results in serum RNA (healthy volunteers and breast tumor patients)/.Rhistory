colnames(x)=1:n
test <- hclust(x)
test <- hclust(t(x))
plot(test)
# exercise one
set.seed(1)
m = 10000
n = 24
x = matrix(rnorm(m*n),m,n)
colnames(x)=1:n
test <- hclust(t(x))
d <- dist( t(x) )
test <- hclust(d
test <- hclust(d)
# exercise one
set.seed(1)
m = 10000
n = 24
x = matrix(rnorm(m*n),m,n)
colnames(x)=1:n
d <- dist( t(x) )
test <- hclust(d)
plot(test)
abline(143)
abline(h=143)
cl = cutree(hc,h=143)
cl
table(true=colnames,cluster=cl)
cl = cutree(hc,h=143)
cl
9/sqrt(24)
9^2/24
set.seed(1)
m = 10000
n = 24
nc = replicate(100,{
x = matrix(rnorm(m*n),m,n)
hc = hclust( dist( t(x)))
length(unique(cutree(hc,h=143)))
})
plot(table(nc)) ## look at the distribution
popsd(nc)
km <- kmeans( t(e), centers=7) # transpose it otherwise the rows
table(tissues,clusters=km$cluster)
table(tissue,clusters=km$cluster)
km <- kmeans( t(e), centers=7) # transpose it otherwise the rows
table(tissue,clusters=km$cluster)
d <- dist( t(e))
mds<- cmdscale(d)
plot(mds[,1],mds[,2],col=km$cluster)
library(GSE5859Subset)
data(GSE5859Subset)
set.seed(10)
dim(geneExpression)
library(GSE5859Subset)
data(GSE5859Subset)
set.seed(10)
d <- dist( t(e))
km<- kmenas(t(sampleInfo),centers=5)
km<- kmeans(t(sampleInfo),centers=5)
km<- kmeans(sampleInfo,centers=5)
d <- dist( t(sampleInfo))
sampleInfo
geneExpression
km<- kmeans( t(geneExpression),centers=5)
sampleInfo
table(sampleInfo,clusters=km$cluster)
geneAnnotation
sampleInfo
km
km<- kmeans( t(geneExpression),centers=5)
km
sampleInfo
plot(km)
km<- kmeans( t(geneExpression),centers=5)
plot(km)
d <- dist( t(geneExpression))
km<- kmeans( d,centers=5)
km
plot(km)
table(sampleInfo,clusters=km$cluster)
table(sampleInfo,clusters=km$cluster)
mds=cmdscale(dist(t(geneExpression)))
set.seed(10)
result=kmeans(t(geneExpression),5)
mypar(1,1)
plot(mds,bg=result$cl,pch=21)
table(sampleInfo$group,result$cluster)
table(sampleInfo$date,result$cluster)
##looks better if we re-order:
table(sampleInfo$date,result$cluster)[,c(4,1,5,3,2)]
library(tissuesGeneExpression)
data(tissuesGeneExpression)
# heatmap in R
image( e[1:100,])
# heatmap in R
libary(genefilter)
install.packages('genefilter')
install("genefilter")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("genefilter")
libary(genefilter)
# heatmap in R
library(genefilter)
rv <- rowVars(e)
idx <- order(-rv)[1:40]
# heatmap in R
library(genefilter)
BiocManager::install("genefilter")
library(genefilter)
BiocManager::install("genefilter")
library(genefilter)
genefilter
rowVars
rowVars()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("genefilter")
library(genefilter)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("genefilter")
library(genefilter)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("genefilter")
libraary(genefilter)
library(genefilter)
# heatmap in R
library(GSE5859Subset)
data(GSE5859Subset
data(GSE5859Subset)
# heatmap in R
library(GSE5859Subset)
data(GSE5859Subset)
install.packages("matrixStats")
library(matrixStats)
?rowMads ##we use mads due to a outlier sample
library(gplots)
install.packages("gplots")
library(gplots)
rv <- rowMads(geneExpression)
idx <- order(-rv)[1:25]
heatmap.2(geneExpression[idx,])
heatmap.2(geneExpression[idx,],trace="none",lablCol=sampleInfo$group)
heatmap.2(geneExpression[idx,],trace="none",labCol=sampleInfo$group)
set.seed(17)
m = nrow(geneExpression)
n = ncol(geneExpression)
x = matrix(rnorm(m*n),m,n)
g = factor(sampleInfo$g )
?rowttest
install.packages("DescTools")
BiocManager::install("remotes")
library('remotes')
BiocManager::install("rformassspectrometry/MsCoreUtils")
BiocManager::install("rformassspectrometry/MsCoreUtils")
BiocManager::install("rformassspectrometry/MsCoreUtils")
library('rformassspectrometry/MsCoreUtils')
library('MsCoreUtils')
BiocManager::install("rformassspectrometry/QFeatures")
library('remotes')
library('MsCoreUtils')
BiocManager::install("rformassspectrometry/MsCoreUtils")
library('MsCoreUtils')
BiocManager::install("rformassspectrometry/QFeatures")
BiocManager::install("rformassspectrometry/QFeatures")
BiocManager::install("statomics/msqrob2")
library('statomics/msqrob2')
library('msqrob2')
version
library(tidyverse)
library(tidyverse)
library(limma)
library(QFeatures)
library(QFeatures)
library(msqrob2)
library(QFeatures)
library(msqrob2)
library(plotly)
peptidesFile <- "https://raw.githubusercontent.com/statOmics/SGA2020/data/quantification/heart/peptides.txt"
ecols <- MSnbase::grepEcols(
peptidesFile,
"Intensity ",
split = "\t")
pe <- readQFeatures(
table = peptidesFile,
fnames = 1,
ecol = ecols,
name = "peptideRaw", sep="\t")
pe <- readQFeatures(
table = peptidesFile,
fnames = 1,
ecol = ecols,
name = "peptideRaw", sep="\t")
pe
pe[["peptideRaw"]]
colData(pe)$location <- substr(
colnames(pe[["peptideRaw"]]),
11,
11) %>%
unlist %>%
as.factor
colData(pe)$tissue <- substr(
colnames(pe[["peptideRaw"]]),
12,
12) %>%
unlist %>%
as.factor
colData(pe)$patient <- substr(
colnames(pe[["peptideRaw"]]),
13,
13) %>%
unlist %>%
as.factor
```{r}
rowData(pe[["peptideRaw"]])$nNonZero <- rowSums(assay(pe[["peptideRaw"]]) > 0)
pe <- zeroIsNA(pe, "peptideRaw") # convert 0 to NA
MSnbase::plotNA(assay(pe[["peptideRaw"]])) +
xlab("Peptide index (ordered by data completeness)")
pe <- logTransform(pe, base = 2, i = "peptideRaw", name = "peptideLog")
limma::plotDensities(assay(pe[["peptideLog"]]))
pe[["peptideLog"]] <-
pe[["peptideLog"]][rowData(pe[["peptideLog"]])$Proteins
%in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins),]
pe[["peptideLog"]] %>%
rowData %>%
names
pe[["peptideLog"]] <- pe[["peptideLog"]][rowData(pe[["peptideLog"]])$
Potential.contaminant != "+", ]
pe[["peptideLog"]] <- pe[["peptideLog"]][rowData(pe[["peptideLog"]])$nNonZero >= 2, ]
nrow(pe[["peptideLog"]])
pe <- normalize(pe, i = "peptideLog", method = "quantiles", name = "peptideNorm")
limma::plotDensities(assay(pe[["peptideNorm"]]))
boxplot(assay(pe[["peptideNorm"]]), col = palette()[-1],
main = "Peptide distribtutions after normalisation", ylab = "intensity")
limma::plotMDS(assay(pe[["peptideNorm"]]),
col = colData(pe)$location:colData(pe)$tissue %>%
as.numeric,
labels = colData(pe) %>%
rownames %>%
substr(start = 11, stop = 13)
)
pe <- aggregateFeatures(pe,
i = "peptideNorm",
fcol = "Proteins",
na.rm = TRUE,
name = "proteinRobust",
fun = MsCoreUtils::robustSummary)
plotMDS(assay(pe[["proteinRobust"]]),
col = colData(pe)$location:colData(pe)$tissue %>%
as.numeric,
labels = colData(pe) %>%
rownames %>%
substr(start = 11, stop = 13)
)
pe <- msqrob(
object = pe,
i = "proteinRobust",
formula = ~ location*tissue + patient)
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[2]])
L <- makeContrast(
c(
"tissueV = 0",
"tissueV + locationR:tissueV = 0",
"tissueV + 0.5*locationR:tissueV = 0","locationR:tissueV = 0"),
parameterNames =
rowData(pe[["proteinRobust"]])$msqrobModels[[2]] %>%
getCoef %>%
names
)
pe <- omnibusTest(pe, "proteinRobust", L)
source("https://raw.githubusercontent.com/statOmics/SGA2020/gh-pages/assets/topFeaturesOmnibus.R")
pe <- omnibusTest(pe, "proteinRobust", L)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
pe <- omnibusTest(pe, "proteinRobust", L)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
pe <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L, overwrite=TRUE)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
pe <- omnibusTest(object = pe, "proteinRobust", L, overwrite =TRUE)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
source("https://raw.githubusercontent.com/statOmics/SGA2020/gh-pages/assets/topFeaturesOmnibus.R")
pe <- omnibusTest(object = pe, "proteinRobust", L, overwrite =TRUE)
pe2 <- omnibusTest(object = pe, "proteinRobust", L, overwrite =TRUE)
rowData(pe[["proteinRobust"]])$omnibusTest
colnames(rowData(pe[["proteinRobust"]])$omnibusTest)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$omnibusTest$tissueV+locationR.tissueV,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$omnibusTest,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$omnibusTest,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
rowData(pe[["proteinRobust"]])$omnibusTest
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.)
pe2 <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L, overwrite=TRUE)
sigNamesLeft <- rowData(pe[["proteinRobust"]])$tissueV %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$tissueV %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibustest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$tissueV %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
rowData(pe[["proteinRobust"]])$omnibusTest
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
dim()
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
dim(.)
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
length(.)
rowData(pe[["proteinRobust"]])$tissueV %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
length(.)
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
length(.)
```{r,warning=FALSE}
X <- model.matrix(~ location*tissue + patient, colData(pe))
covarUnscaled <- solve(t(X) %*% X)
varContrasts <- t(L)%*%covarUnscaled%*%L %>%
diag
varContrasts
sqrt(varContrasts)
X
27/64
0.25*0.25*0.25
1/64
0.75*0.75*0.75
2*4*2*4*4
2*4*2*4*2
97+48
sraInfo <- read.csv("SraRunInfoElegans.csv")
library(tidyverse)
library(tidyverse)
library(Rsubread)
library("GEOquery")
sraInfo <- read.csv("SraRunInfoElegans.csv")
sraInfo <- read.csv("SraRunInfo.csv")
pdata <- merge(pdata, sraInfo, by = "SampleName")
sraInfo
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/methylation data")
library(affy)
library(arrayQualityMetrics)
library(ArrayExpress)
library(limma)
library(siggenes)
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/miRNA profiling array results in serum RNA (healthy volunteers and breast tumor patients)")
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/miRNA profiling array results in serum RNA (healthy volunteers and breast tumor patients)")
## Download data to your working directory
getAE("E-MTAB-6652")
# load in the expressionFeatureSet object
BreastCancer_miRNA <- ArrayExpress("E-MTAB-6652")
BreastCancer_miRNA
# exprs functions returns the intensity values for each sample (column)
exprs(BreastCancer_miRNA)
limma::plotDensities(exprs(BreastCancer_miRNA)) # check this further
## Reads in all .cel files and takes phenoData from the ExpressionFeatureset we loaded using https_ArrayExpress
BreastCancer_miRNA <- ReadAffy(phenoData=pData(BreastCancer_miRNA))
#pData returns the phenotypic data we loaded using ReadAffy
pData(BreastCancer)
#pData returns the phenotypic data we loaded using ReadAffy
pData(BreastCancer_miRNA)
## Quality Control on raw data
####################
# this is used to perform an explorative quality evaluation of hte orginal data and the log transformed data
## arrayQualityMetrics (open "index.html" file for a full overview of the output)
arrayQualityMetrics(BreastCancer_miRNA,outdir="/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/miRNA profiling array results in serum RNA (healthy volunteers and breast tumor patients)/raw",force=T)
## Quality Control on raw data
####################
# this is used to perform an explorative quality evaluation of hte orginal data and the log transformed data
## arrayQualityMetrics (open "index.html" file for a full overview of the output)
arrayQualityMetrics(BreastCancer_miRNA,outdir="/Users/tristanvanneste/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/miRNA profiling array results in serum RNA (healthy volunteers and breast tumor patients)/raw",force=T)
?arrayQualityMetrics
getCdfInfo(BreastCancer_miRNA)
library(miRNA-4_0)
library('miRNA-4_0')
BiocManager::install("pd.mirna.4.0")
library("pd.mirna.4.0")
library()
## Quality Control on raw data
####################
# this is used to perform an explorative quality evaluation of hte orginal data and the log transformed data
## arrayQualityMetrics (open "index.html" file for a full overview of the output)
arrayQualityMetrics(BreastCancer_miRNA,outdir="/Users/tristanvanneste/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/miRNA profiling array results in serum RNA (healthy volunteers and breast tumor patients)/raw",force=T)
BiocManager::install("mirna40cdf")
BreastCancer_miRNA
# load in the expressionFeatureSet object
BreastCancer_miRNA <- ArrayExpress("E-MTAB-6652")
BreastCancer_miRNA
# exprs functions returns the intensity values for each sample (column)
exprs(BreastCancer_miRNA)
## Reads in all .cel files and takes phenoData from the ExpressionFeatureset we loaded using https_ArrayExpress
BreastCancer_miRNA <- ReadAffy(phenoData=pData(BreastCancer_miRNA))
BreastCancer_miRNA
?ReadAffy
pData(BreastCancer_miRNA)
#pData returns the phenotypic data we loaded using ReadAffy
pData(BreastCancer_miRNA)
exprs(BreastCancer_miRNA)
dim(exprs(BreastCancer_miRNA))
# Preprocessing of the data
# rma function is used to perform background correction as well as quantile normalization
BreastCancer_miRNA_RMA<- affy::rma(BreastCancer_miRNA,background=T)
BreastCancer_miRNA
library(oligo)
dat <- read.celfiles(list.celfiles())
?rma
eset <- rma(dat)
eset
# exprs functions returns the intensity values for each sample (column)
exprs(eset)
dat
?ReadAffy
BreastCancer_miRNA <- rma(dat)
BreastCancer_miRNA
dat
# exprs functions returns the intensity values for each sample (column)
exprs(dat)
#pData returns the phenotypic data we loaded using ReadAffy
pData(dat)
exprs(dat)
## Quality Control on raw data
####################
# this is used to perform an explorative quality evaluation of hte orginal data and the log transformed data
## arrayQualityMetrics (open "index.html" file for a full overview of the output)
arrayQualityMetrics(dat,outdir="/Users/tristanvanneste/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/miRNA profiling array results in serum RNA (healthy volunteers and breast tumor patients)/raw",force=T)
arrayQualityMetrics(dat,outdir="/Users/tristanvanneste/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/miRNA profiling array results in serum RNA (healthy volunteers and breast tumor patients)/rawlog",force=T,do.logtransform=T)
