aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
sigNames <- rowData(pe[["proteinRobust"]])$conditionTreg %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNames, ])
dim(subset(rowData(pe[['proteinRobust']]$conditionTreg, adjPval < 0.05)))[1]
dim(subset(rowData(pe[['proteinRobust']]$conditionTreg, adjPval < 0.05)))
rowData(pe[["proteinRobust"]])$conditionTreg
rowData(pe[["proteinRobust"]])$conditionTreg[,6]
rowData(pe[["proteinRobust"]])$conditionTreg[rowData(pe[["proteinRobust"]])$conditionTreg[,6]>0.05]
rowData(pe[["proteinRobust"]])$conditionTreg[rowData(pe[["proteinRobust"]])$conditionTreg[,6] > 0.05,]
rowData(pe[["proteinRobust"]])$conditionTreg[rowData(pe[["proteinRobust"]])$conditionTreg[,6] < 0.05,]
dim(subset(rowData(pe[['proteinRobust]])$conditionTreg, adjPval < 0.05))[1]
dim(subset(rowData(pe[['proteinRobust']])$conditionTreg, adjPval < 0.05))[1]
dim(subset(rowData(pe[["proteinRobust"]])$conditionTreg, adjPval < 0.05))[1]
cond <- which(
strsplit(colnames(pe)[[1]][1], split = "")[[1]] == "Treg") # find where condition is stored
colData(pe)$condition <- substr(colnames(pe), cond, cond) %>%
unlist %>%
as.factor
colData(pe)
colData(pe)$condition <- as.factor(c(rep('Tconv',4),rep('Treg',4)))
colData(pe)$condition
colData(pe)
library(tidyverse)
library(limma)
library(QFeatures)
library(QFeatures)
library(msqrob2)
library(plotly)
peptidesFile <- "https://raw.githubusercontent.com/statOmics/SGA2020/data/quantification/heart/peptides.txt"
ecols <- MSnbase::grepEcols(
peptidesFile,
"Intensity ",
split = "\t")
pe <- readQFeatures(
table = peptidesFile,
fnames = 1,
ecol = ecols,
name = "peptideRaw", sep="\t")
pe
pe[1]
pe['peptideRaw']
pe[peptideRaw]
peptideRaw
pe
pe[[1]]
cond <- which(
strsplit(colnames(pe)[[1]][1], split = "")[[1]] == "R") # find where condition is stored
colData(pe)$condition <- substr(colnames(pe), cond, cond) %>%
unlist %>%
as.factor
cond <- which(
strsplit(colnames(pe)[[1]][1], split = "")[[1]] == "R") # find where condition is stored
cond
pe[[1]]
pe
cond <- which(
strsplit(colnames(pe)[[1]][1], split = "")[[1]] == "R") # find where condition is stored
colData(pe)$condition <- substr(colnames(pe), cond, cond) %>%
unlist %>%
as.factor
colData(pe)$condition <- as.factor(c(rep('LA',6),rep('RV',6)))
colData(pe))
colData(pe)
colData(pe)$condition <- as.factor(c(rep('LA',3),rep('LV',3),rep('RA',3),rep('RV',3)))
colData(pe)
rowData(pe[["peptideRaw"]])$nNonZero <- rowSums(assay(pe[["peptideRaw"]]) > 0)
pe <- zeroIsNA(pe, "peptideRaw") # convert 0 to NA
MSnbase::plotNA(assay(pe[["peptideRaw"]])) +
xlab("Peptide index (ordered by data completeness)")
pe <- logTransform(pe, base = 2, i = "peptideRaw", name = "peptideLog")
limma::plotDensities(assay(pe[["peptideLog"]]))
pe[["peptideLog"]] <-
pe[["peptideLog"]][rowData(pe[["peptideLog"]])$Proteins
%in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins),]
pe[["peptideLog"]] <- pe[["peptideLog"]][rowData(pe[["peptideLog"]])$Reverse != "+", ]
pe[["peptideLog"]] <-
pe[["peptideLog"]][rowData(pe[["peptideLog"]])$Proteins
%in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins),]
pe
pe[[2]]
pe[[1]]
rowData(pe[["peptideLog"]])
```{r}
pe[["peptideLog"]] <- pe[["peptideLog"]][rowData(pe[["peptideLog"]])$Reverse != "+", ]
pe[["peptideLog"]] <- pe[["peptideLog"]][rowData(pe[["peptideLog"]])$
Potential.contaminant != "+", ]
pe[["peptideLog"]] <- pe[["peptideLog"]][rowData(pe[["peptideLog"]])$nNonZero >= 2, ]
nrow(pe[["peptideLog"]])
pe <- normalize(pe, i = "peptideLog", method = "quantiles", name = "peptideNorm")
limma::plotDensities(assay(pe[["peptideNorm"]]))
boxplot(assay(pe[["peptideNorm"]]), col = palette()[-1],
main = "Peptide distribtutions after normalisation", ylab = "intensity")
limma::plotMDS(assay(pe[["peptideNorm"]]), col = as.numeric(colData(pe)$condition))
pe <- aggregateFeatures(pe,
i = "peptideNorm",
fcol = "Proteins",
na.rm = TRUE,
name = "proteinRobust",
fun = MsCoreUtils::robustSummary)
plotMDS(assay(pe[["proteinRobust"]]), col = as.numeric(colData(pe)$condition))
limma::plotDensities(assay(pe[["peptideNorm"]]))
limma::plotMDS(assay(pe[["peptideNorm"]]), col = as.numeric(colData(pe)$condition))
pe <- msqrob(object = pe, i = "proteinRobust", formula = ~condition)
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[1]])
condition
pe <- msqrob(object = pe, i = "proteinRobust", formula = ~condition)
pe
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[1]])
pe$condition
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[1]])
colData(pe)$condition <- as.factor(c(rep('LA',3),rep('LV',3),rep('RA',3),rep('RV',3)))
MSnbase::plotNA(assay(pe[["peptideRaw"]])) +
xlab("Peptide index (ordered by data completeness)")
boxplot(assay(pe[["peptideNorm"]]), col = palette()[-1],
main = "Peptide distribtutions after normalisation", ylab = "intensity")
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[2]])
colData(pe)$condition <- as.factor(c(rep('LA',3),rep('LV',3),rep('RA',3),rep('RV',3)))
colData(pe)$condition
colData(pe)
colData(pe)$sample <- as.factor(rep(c(3,4,8),4)
)
colData(pe)
pe <- msqrob(object = pe, i = "proteinRobust", formula = ~condition+ sample)
pe <- msqrob(object = pe, i = "proteinRobust", formula = ~condition+ sample, overwrite=TRUE)
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[2]])
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[1]])
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[2]])
L <- makeContrast("conditionLV=0", parameterNames = c("conditionLV"))
pe <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L)
volcano <- ggplot(rowData(pe[["proteinRobust"]])$conditionLV,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
L <- makeContrast("conditionRA=0", parameterNames = c("conditionLV"))
L <- makeContrast("conditionRA=0", parameterNames = c("conditionRA"))
pe <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L)
volcano <- ggplot(rowData(pe[["proteinRobust"]])$conditionRA,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
pe <- msqrob(object = pe, i = "proteinRobust", formula = ~0+ condition+ sample, overwrite=TRUE)
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[2]])
L <- makeContrast("conditionLA=conditionRA", parameterNames = c("conditionLA",'conditionRA'))
L <- makeContrast("conditionLA-conditionRA=0", parameterNames = c("conditionLA",'conditionRA'))
pe <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L)
pe
pe[[4]]
pe[[proteinRobust]]
pe[['proteinRobust']]
rowData(pe[["proteinRobust”]])[“conditionLA - conditionRA”]
)
d
))
exit
L <- makeContrast("conditionLA-conditionRA=0", parameterNames = c("conditionLA",'conditionRA'))
L <- makeContrast("conditionLA-conditionRA=0", parameterNames = c("conditionLA",'conditionRA'))
pe <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L)
volcano <- ggplot(rowData(pe[["proteinRobust"]])["conditionLA - conditionRA"],
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
rowData(pe[["proteinRobust”]])[“conditionLA - conditionRA”]
rowData(pe[["proteinRobust']])['conditionLA - conditionRA']
rowData(pe[["proteinRobust']])['conditionLA - conditionRA']
rowData(pe[['proteinRobust']])['conditionLA - conditionRA']
rowData(pe[['proteinRobust']])['conditionLA - conditionRA']
L <- makeContrast("conditionLA=0", parameterNames = c("conditionLA"))
L1 <- makeContrast("conditionRA=0", parameterNames = c("conditionRA"))
pe <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L-L1)
pe
pe[['proteinRobust']]
pe <- msqrob(object = pe, i = "proteinRobust", formula = ~0 + condition + sample, overwrite=TRUE)
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[2]])
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[3]])
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[2]])
L <- makeContrast("conditionLA=0", parameterNames = c("conditionLA"))
pe <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L)
pe <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L,overwrite=TRUE)
volcano <- ggplot(rowData(pe[["proteinRobust"]])$conditionLA,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
L <- makeContrast(c("conditionLA-conditionLV=0","conditionRA-conditionRV=0","(conditionLA-conditionLV)-(conditionRA-conditionRV)"), parameterNames = c("conditionLA","conditionLV","conditionRV","conditionRA"))
L <- makeContrast(c("conditionLA-conditionLV=0","conditionRA-conditionRV=0","(conditionLA-conditionLV)-(conditionRA-conditionRV)=0"), parameterNames = c("conditionLA","conditionLV","conditionRV","conditionRA"))
pe <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L,overwrite=TRUE)
pe[['proteinRobust']]
pe[['proteinRobust']] %>% rowData %>% names()
volcano <- ggplot(rowData(pe[["proteinRobust"]])$conditionLA - conditionLV,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano <- ggplot(rowData(pe[["proteinRobust"]])$conditionLA-conditionLV,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano <- ggplot(rowData(pe[["proteinRobust"]])["conditionLA-conditionLV"],
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
pe[['proteinRobust']] %>% rowData %>% names()
volcano <- ggplot(rowData(pe[["proteinRobust"]])["conditionLA - conditionLV"],
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano <- ggplot(pe[["proteinRobust"]])%>%rowData %>% ["conditionLA - conditionLV"],
volcano <- ggplot(pe[["proteinRobust"]]) %>% rowData %>% "conditionLA - conditionLV",
volcano <- ggplot(pe[["proteinRobust"]]) %>% rowData %>% conditionLA - conditionLV,
volcano <- ggplot(pe[['proteinRobust']]) %>% rowData %>% conditionLA - conditionLV,
pe[['proteinRobust']]) %>% rowData %>% conditionLA - conditionLV
volcano <- ggplot(pe[['proteinRobust']] %>% rowData %>% conditionLA - conditionLV),
volcano <- ggplot(pe[['proteinRobust']] %>% rowData %>% conditionLA - conditionLV)+
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
rowData(pe[["proteinRobust"]])
volcano <- ggplot(rowData(pe[["proteinRobust"]])$conditionLA - conditionLV,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano <- ggplot(rowData(pe[["proteinRobust"]])$conditionLA-conditionLV,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano <- ggplot(rowData(pe[["proteinRobust"]])$(conditionLA-conditionLV),
volcano <- ggplot(rowData(pe[["proteinRobust"]])$[conditionLA - conditionLV],
pe
pe %>% proteinRobust
pe[[proteinRobust]]
pe %>% "proteinRobust"
pe[["proteinRobust"]]
pe[["proteinRobust"]] %>% rowData names()
pe[["proteinRobust"]] %>% rowData names
pe[["proteinRobust"]] %>% rowData
pe[["proteinRobust"]] %>% rowData %>% names
pe[["proteinRobust"]] %>% rowData %>% names %>% conditionRA - conditionRV
pe[["proteinRobust"]] %>% rowData %>% names %>% (conditionRA - conditionRV)
pe[["proteinRobust"]] %>% rowData %>% names %>% [conditionRA - conditionRV]
pe[["proteinRobust"]] %>% rowData %>% names %>% conditionRA-conditionRV
pe[["proteinRobust"]] %>% rowData %>% names
pe[["proteinRobust"]] %>% rowData %>% names[19]
pe[["proteinRobust"]] %>% rowData %>% names(19)
pe[["proteinRobust"]] %>% rowData %>% names(1)
pe[["proteinRobust"]] %>% rowData %>% names()
pe[["proteinRobust"]] %>% rowData %>% names
pe[["proteinRobust"]] %>% rowData %>% names[5]
pe[["proteinRobust"]][rowData] %>% names
pe[["proteinRobust"]][rowData]
pe[["proteinRobust"]][[rowData]
]
pe[["proteinRobust"]]
pe[["proteinRobust"]]`.rowNamesDF<-`()
rowData(pe[["proteinRobust"]])
library(tidyverse)
library(limma)
library(QFeatures)
library(QFeatures)
library(msqrob2)
library(plotly)
peptidesFile <- "https://raw.githubusercontent.com/statOmics/SGA2020/data/quantification/heart/peptides.txt"
ecols <- MSnbase::grepEcols(
peptidesFile,
"Intensity ",
split = "\t")
colData(pe)$condition <- as.factor(c(rep('LA',3),rep('LV',3),rep('RA',3),rep('RV',3)))
cond <- which(
strsplit(colnames(pe)[[1]][1], split = "")[[1]] == "A") # find where condition is stored
colData(pe)$condition <- as.factor(c(rep('LA',3),rep('LV',3),rep('RA',3),rep('RV',3)))
colData(pe)$condition
peptidesFile <- "https://raw.githubusercontent.com/statOmics/SGA2020/data/quantification/heart/peptides.txt"
ecols <- MSnbase::grepEcols(
peptidesFile,
"Intensity ",
split = "\t")
pe <- readQFeatures(
table = peptidesFile,
fnames = 1,
ecol = ecols,
name = "peptideRaw", sep="\t")
colData(pe)$condition
colData(pe)$condition <- as.factor(c(rep('LA',3),rep('LV',3),rep('RA',3),rep('RV',3)))
colData(pe)$sample <- as.factor(rep(c(3,4,8),4))
rowData(pe[["peptideRaw"]])$nNonZero <- rowSums(assay(pe[["peptideRaw"]]) > 0)
pe <- zeroIsNA(pe, "peptideRaw") # convert 0 to NA
MSnbase::plotNA(assay(pe[["peptideRaw"]])) +
xlab("Peptide index (ordered by data completeness)")
pe <- logTransform(pe, base = 2, i = "peptideRaw", name = "peptideLog")
pe[["peptideLog"]] <-
pe[["peptideLog"]][rowData(pe[["peptideLog"]])$Proteins
%in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins),]
pe[["peptideLog"]] <- pe[["peptideLog"]][rowData(pe[["peptideLog"]])$
Potential.contaminant != "+", ]
pe[["peptideLog"]] <- pe[["peptideLog"]][rowData(pe[["peptideLog"]])$nNonZero >= 2, ]
nrow(pe[["peptideLog"]])
pe <- normalize(pe, i = "peptideLog", method = "quantiles", name = "peptideNorm")
limma::plotDensities(assay(pe[["peptideNorm"]]))
boxplot(assay(pe[["peptideNorm"]]), col = palette()[-1],
main = "Peptide distribtutions after normalisation", ylab = "intensity")
limma::plotMDS(assay(pe[["peptideNorm"]]), col = as.numeric(colData(pe)$condition))
pe <- aggregateFeatures(pe,
i = "peptideNorm",
fcol = "Proteins",
na.rm = TRUE,
name = "proteinRobust",
fun = MsCoreUtils::robustSummary)
plotMDS(assay(pe[["proteinRobust"]]), col = as.numeric(colData(pe)$condition))
pe <- msqrob(object = pe, i = "proteinRobust", formula = ~0 + condition + sample, overwrite=TRUE)
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[2]])
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[1]]) # first one has too many NAN
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[2]]) # first one has too many NAN
L <- makeContrast(c("conditionLA-conditionLV=0","conditionRA-conditionRV=0","(conditionLA-conditionLV)-(conditionRA-conditionRV)=0"), parameterNames = c("conditionLA","conditionLV","conditionRV","conditionRA"))
pe <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L,overwrite=TRUE)
volcano <- ggplot(rowData(pe[["proteinRobust"]])$contrast,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
volcano <- ggplot(rowData(pe[["proteinRobust"]])$contrast,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
library(tidyverse)
library(limma)
library(QFeatures)
library(msqrob2)
library(plotly)
volcano <- ggplot(rowData(pe[["proteinRobust"]])$contrast,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
library(ggplot2)
volcano
library(ggplot)
sigNames <- rowData(pe[["proteinRobust"]])$contrast %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
rowData(pe[["proteinRobust"]])$
)
rowData(pe[["proteinRobust"]])
names(rowData(pe[["proteinRobust"]]))
rowData(pe[["proteinRobust"]])"conditionLA - conditionLV"
volcano <- ggplot(rowData(pe[["proteinRobust"]])$'conditionLA-conditionLV',
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
rowData(pe[["proteinRobust"]])$'conditionLA-conditionLV' %>% head()
rowData(pe[["proteinRobust"]]) %>% names
rowData(pe[["proteinRobust"]]) %>% head()
rowData(pe[["proteinRobust"]])[,13] %>% head()
rowData(pe[["proteinRobust"]])[,14] %>% head()
rowData(pe[["proteinRobust"]]) %>% names
volcano <- ggplot(rowData(pe[["proteinRobust"]])[,14],
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
volcano <- ggplot(rowData(pe[["proteinRobust"]])[,15],
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
volcano <- ggplot(rowData(pe[["proteinRobust"]])[,14],
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
volcano <- ggplot(rowData(pe[["proteinRobust"]])[,14],
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano2 <- ggplot(rowData(pe[["proteinRobust"]])[,15],
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano3 <- ggplot(rowData(pe[["proteinRobust"]])[,16],
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano3
volcano
volcano2
volcano
volcano2
volcano3
sigNames <- rowData(pe[["proteinRobust"]])[,14] %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNames, ])
sigNames <- rowData(pe[["proteinRobust"]])[,15] %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNames, ])
sigNames <- rowData(pe[["proteinRobust"]])[,14] %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNames, ])
sigNames <- rowData(pe[["proteinRobust"]])[,16] %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNames, ])
rowData(pe[["proteinRobust"]])[,14] %>%
rownames_to_column(var = "protein") %>%
ggplot(aes(x=grepl("UPS",protein),y=logFC)) +
geom_boxplot() +
xlab("UPS") +
geom_segment(
x = 1.5,
xend = 2.5,
y = log2(0.74/0.25),
yend = log2(0.74/0.25),
colour="red") +
geom_segment(
x = 0.5,
xend = 1.5,
y = 0,
yend = 0,
colour="red") +
annotate(
"text",
x = c(1,2),
y = c(0,log2(0.74/0.25))+.1,
label = c(
"log2 FC Ecoli = 0",
paste0("log2 FC UPS = ",round(log2(0.74/0.25),2))
),
colour = "red")
rowData(pe[["proteinRobust"]])[,14] %>%
rownames_to_column(var = "protein") %>%
ggplot(aes(x=grepl("condition",protein),y=logFC)) +
geom_boxplot() +
xlab("UPS") +
geom_segment(
x = 1.5,
xend = 2.5,
y = log2(0.74/0.25),
yend = log2(0.74/0.25),
colour="red") +
geom_segment(
x = 0.5,
xend = 1.5,
y = 0,
yend = 0,
colour="red") +
annotate(
"text",
x = c(1,2),
y = c(0,log2(0.74/0.25))+.1,
label = c(
"log2 FC Ecoli = 0",
paste0("log2 FC UPS = ",round(log2(0.74/0.25),2))
),
colour = "red")
rowData(pe[["proteinRobust"]])[,14] %>%
rownames_to_column(var = "condition") %>%
ggplot(aes(x=grepl("condition",protein),y=logFC)) +
geom_boxplot() +
xlab("UPS") +
geom_segment(
x = 1.5,
xend = 2.5,
y = log2(0.74/0.25),
yend = log2(0.74/0.25),
colour="red") +
geom_segment(
x = 0.5,
xend = 1.5,
y = 0,
yend = 0,
colour="red") +
annotate(
"text",
x = c(1,2),
y = c(0,log2(0.74/0.25))+.1,
label = c(
"log2 FC Ecoli = 0",
paste0("log2 FC UPS = ",round(log2(0.74/0.25),2))
),
colour = "red")
volcano2
volcano
pe <- msqrob(object = pe, i = "proteinRobust", formula = ~0 + condition * sample, overwrite=TRUE)
pe <- msqrob(object = pe, i = "proteinRobust", formula = ~0+ condition * sample, overwrite=TRUE)
pe <- msqrob(object = pe, i = "proteinRobust", formula = ~0+ condition + sample, overwrite=TRUE)
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[2]]) # first one has too many NAN
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
setwd("~/documenten/Documenten/Ugent/applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
# laptop
setwd("~/documenten/Documenten/Ugent/applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
## Load packages
library(affy)
library(arrayQualityMetrics)
library(ArrayExpress)
library(limma)
library(biomaRt)
?getAE
?ReadAffy
# load in the expressionFeatureSet object
BreastCancer <- ArrayExpress("E-GEOD-15852")
