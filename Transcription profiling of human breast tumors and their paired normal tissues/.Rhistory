sort(rownames(pData(BreastCancerRMA)))
pData(BreastCancerRMA[sort(rownames(pData(BreastCancerRMA))),]
pData(BreastCancerRMA[sort(rownames(pData(BreastCancerRMA))),]
)
pData(BreastCancerRMA[sort(rownames(pData(BreastCancerRMA))),])
#Transcription profiling of human breast tumors and their paired normal tissues
#desktop
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
## Load packages
library(affy)
library(arrayQualityMetrics)
library(ArrayExpress)
library(limma)
library(biomaRt)
BreastCancer <- ReadAffy() # If ArrayExpress does not work => use this
dim(pData(BreastCancerRMA))
dim(pData(BreastCancer))
exprs(BreastCancer)
pData(BreastCancer)
disease <- NULL
patients <- rep(1:43, each = 2)
for (i in pData(BreastCancer)$sample){
if((i %% 2) == 0) {
disease[i] <- 'Cancer'}
else{
disease[i] <- 'Normal'}
}
disease
patients
annotation <- data.frame(disease,patients)
dim(exprs(BreastCancer))
# Preprocessing of the data
# rma function is used to perform background correction as well as quantile normalization
BreastCancerRMA<- affy::rma(BreastCancer,background=T) #  If TRUE, background correct using RMA background correction
# begin here again
annotation$patients <- factor(annotation$patients)
annotation$disease <- factor(annotation$disease)
## Differential expression by LIMMA
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~0+disease+patients, data= annotation)
colSums(design) # checking if this is correct
#patients toevoegen
colnames(design)[1:2]<-c("Cancer_tissue","normal_tissue")
fit <- lmFit(BreastCancerRMA,design)
cont.matrix <- makeContrasts(CancervsControl=Cancer_tissue-normal_tissue,levels=design)
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(BreastCancerRMA)))
head(LIMMAout)
limma::plotMA(fit2, main= 'MA-plot')
?plotMA
dim(fit2)
hist(fit2$p.value, main= 'distributions of the p-values')
hist(fit2$p.value, main= 'distributions of the p-values',xlab='p-values')
threshold.sign <- LIMMAout[LIMMAout$adj.P.Val<0.05,]
with(LIMMAout, plot(logFC, -log10(P.Value), pch=20,main="Volcano plot"))
with(subset(threshold.sign),points(logFC, -log10(P.Value),pch=20,col="red"))
# Have a look at the results and search for other probesets for your DE genes
significant_pvalues<- LIMMAout[LIMMAout$adj.P.Val<0.05,]
dim(significant_pvalues) # 5333 probes statistical significant
significant_pvalues_1<- LIMMAout[LIMMAout$adj.P.Val<0.05 & abs(LIMMAout$logFC) >1,]
dim(significant_pvalues_1) # 40 probes statistical significant
significant_pvalues_2<- LIMMAout[LIMMAout$adj.P.Val<0.05 & abs(LIMMAout$logFC) >1.5,]
dim(significant_pvalues_2) # 9 probes statistical significant
head(significant_pvalues_1)
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t",fill=T)
print(tail(annotation_BC))
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t",skip=17,fill=T)
print(tail(annotation_BC))
annotation_BC[100:105,]
annotation_BC <- annotation_BC[sort(annotation_BC$Composite.Element.Name,index.return=T)$ix,]
## Check if all probes are present in both sets
dim(annotation_BC)
dim(LIMMAout)
## Double check => "Assumption is the mother of all fuck up's ;)"
sum(annotation_BC$Composite.Element.Name==sort(rownames(LIMMAout)))
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(rownames(LIMMAout),index.return=T)$ix,]
dim(LIMMAout_sorted)
## Add gene names to LIMMA output
LIMMAout_sorted$gene <- annotation_BC$Composite.Element.Database.Entry.ensembl.
LIMMAout_annot <- LIMMAout_sorted[sort(LIMMAout_sorted$adj.P.Val,index.return=T)$ix,]
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
significant_pvalues<- LIMMAout_annot[LIMMAout_annot$adj.P.Val<0.05& abs(LIMMAout$logFC) >1,]
dim(significant_pvalues)
head(significant_pvalues)
tail(significant_pvalues)
affyids <- rownames(significant_pvalues)
output_sign <-getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene_id','hgnc_symbol','chromosome_name', 'start_position', 'end_position'), #  is a vector of attributes that one wants to retrieve (= the output of the query).
filters = 'affy_hg_u133_plus_2', #  is a vector of filters that one wil use as input to the query.
values = affyids, # a vector of values for the filters
mart = ensembl)
?getBM
ensembl <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
output_sign <-getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene_id','hgnc_symbol','chromosome_name', 'start_position', 'end_position'), #  is a vector of attributes that one wants to retrieve (= the output of the query).
filters = 'affy_hg_u133_plus_2', #  is a vector of filters that one wil use as input to the query.
values = affyids, # a vector of values for the filters
mart = ensembl)
significant_pvalues[,"hgnc_symbol"] <-NA
significant_pvalues[,"chromosome_name"] <-NA
significant_pvalues[,"start_position"] <-NA
significant_pvalues[,"end_position"] <-NA
# filtering of the zero entries
output_sign <- output_sign[!output_sign$hgnc_symbol=="",]
output_sign <- output_sign[!output_sign$affy_hg_u133_plus_2=="",]
count=1
significant_pvalues <- significant_pvalues[rownames(significant_pvalues)%in%output_sign$affy_hg_u133_plus_2,]
for (i in rownames(significant_pvalues)){
significant_pvalues$hgnc_symbol[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,3]
significant_pvalues$chromosome_name[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,4]
significant_pvalues$start_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,5]
significant_pvalues$end_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,6]
count=count+1
}
significant_pvalues
significant_pvalues2 <- significant_pvalues
head(significant_pvalues2)
load("Significant_output_annotation_transcription.Rda")
head(significant_pvalues)
dim(significant_pvalues2)
dim(significant_pvalues)
biologisch_relevant <- significant_pvalues[abs(significant_pvalues$logFC)>1,]
dim(biologisch_relevant)
head(biologisch_relevant)
head(significant_pvalues2)
save(significant_pvalues2,file="Significant_output_annotation_transcription.Rda") # object noemt significant_pvalues2
session.info()
sessioninfo()
sessioninfo
sessionInfo
install.packages('sessioninfo')
library('sessioninfo')
sessioninfo
sessioninfo
session_info
sessionInfo()
load("Significant_output_annotation_methylation.Rda") #LIMMAout_annot_2
dim(significant_pvalues)
dim(LIMMAout_annot_2)
dim(significant_p_values)
load("Significant_output_annotation_methylation.Rda") #LIMMAout_annot_2
dim(LIMMAout_annot_2)
load("Significant_output_annotation_transcription.Rda")# object noemt significant_pvalues2
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/methylation/GSE101443_RAW")
## Load packages
library('lumi')
library('wateRmelon')
library('ChAMPdata')
methyldata <- readEPIC(getwd())
ID <- c('GSM2703232','GSM2703233', 'GSM2703234', 'GSM2703235', 'GSM2703236','GSM2703237', 'GSM2703238', 'GSM2703239')
condition <- c('Tumour_A','Normal_A','Tumour_B','Normal_B','Tumour_C','Normal_C','Tumour_D','Normal_D')
Patient <- c('A','A','B','B','C','C','D','D')
annotation <- data.frame(ID,condition,Patient)
## Change sampleNames to something more comprehensible
sampleNames(methyldata) <- annotation[,2]
sampleNames(methyldata)
## Remove NA values
methyldata <- methyldata[!(rowSums(is.na(exprs(methyldata)))>=1),]
methyldata
## Remove probes for which calling p-value is insufficient
methyldata.pf<-pfilter(methyldata) # removes the probes which we are not sure that are called correctly
## Comparison of average methylation between control and tumor samples
boxplot(betas(methyldata),las=2)
meth_mean_tumour <- rep(0,8)
meth_mean_control <- rep(0,8)
for (i in 1:ncol(methyldata)){
if((i %% 2) == 0) { # even
meth_mean_control[i] <- mean(betas(methyldata)[,i])
} else {
meth_mean_tumour[i] <- mean(betas(methyldata)[,i])
}
}
meth_mean_tumour <- meth_mean_tumour[c(1,3,5,7)]
meth_mean_control <- meth_mean_control[c(2,4,6,8)]
t_test_res <- t.test(meth_mean_control,meth_mean_tumour,var.equal=F)
t_test_res
dat_boxplot <- data.frame(betas = c(meth_mean_tumour,meth_mean_control),
group = c('Tumour','Tumour','Tumour','Tumour','Normal','Normal','Normal','Normal'))
boxplot(betas~group,dat_boxplot,las=2)
## Perform normalization including dye color adjustment
methyldata.dasen.pf <- dasen(methyldata.pf)
## Make methylumi objects to check density and color bias adjustment
#transform both the non-normalized counts as the normalized counts to a MethyLumiM object
methyldataM <- as(methyldata.pf, 'MethyLumiM')
methyldataN <- as(methyldata.dasen.pf, 'MethyLumiM')
## Build design and contrasts
condition <- factor(as.character(c('Tumour','Normal','Tumour','Normal','Tumour','Normal','Tumour','Normal')))
patient <- factor(annotation$Patient)
design2 <- model.matrix(~0+condition+patient)
colnames(design2)[1:2] <- c("Control","Tumor")
design2
cont.matrix2 <- makeContrasts(TumourvsControl=Tumor-Control,levels=design2)
## Limma
fit_2 <- lmFit(methyldataN,design2) # normalized data
fit_2 <- contrasts.fit(fit_2,cont.matrix2)
fit_2 <- eBayes(fit_2)
volcanoplot(fit2)
volcanoplot(fit_2)
LIMMAout_2 <- topTable(fit_2,adjust="BH",number=nrow(exprs(methyldata)))
LIMMAout_2
dim(LIMMAout_2[LIMMAout_2$adj.P.Val <= 0.0615913,])
dim(LIMMAout_2[abs(LIMMAout_2$logFC) > 2 & LIMMAout_2$adj.P.Val <= 0.0615913,]) # 358 significante genen gevonden
dim(LIMMAout_2[LIMMAout_2$logFC > 2 & LIMMAout_2$adj.P.Val <= 0.0615913,]) # 251 significante genen gevonden
dim(LIMMAout_2[LIMMAout_2$logFC < (-2) & LIMMAout_2$adj.P.Val <= 0.0615913,]) # 107 significante genen gevonden
## Load annotation and sort alphabetically on probe name
#https://www.bioconductor.org/packages/devel/data/experiment/manuals/ChAMPdata/man/ChAMPdata.pdf
data("probe.features")
annotation_MA <- probe.features
print(head(annotation_MA))
annotation_MA <- annotation_MA[sort(rownames(annotation_MA),index.return=T)$ix,]
## Check if all probes are present in both sets
dim(LIMMAout_2)
dim(annotation_MA) # annotation has more rows than Limma output
sum(LIMMAout_2$Probe_ID%in%rownames(annotation_MA))
sum(rownames(annotation_MA)%in%LIMMAout_2$Probe_ID)
## Since more probes are present in the annotation file, remove unnecessary probes
annotation_MA <- annotation_MA[rownames(annotation_MA)%in%LIMMAout_2$Probe_ID,]
dim(annotation_MA)
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted_2 <- LIMMAout_2[sort(LIMMAout_2$Probe_ID,index.return=T)$ix,]
## Add gene names to LIMMA output
LIMMAout_sorted_2$Gene <- annotation_MA$gene
LIMMAout_sorted_2$Feature <- annotation_MA$feature
LIMMAout_sorted_2$Chrom <- annotation_MA$CHR
LIMMAout_sorted_2$Pos <- annotation_MA$MAPINFO
LIMMAout_sorted_2$Chrom <- as.character(LIMMAout_sorted$Chrom)
LIMMAout_sorted_2$Gene <- as.character(LIMMAout_sorted$Gene)
LIMMAout_sorted_2$Feature <- as.character(LIMMAout_sorted$Feature)
# The data type for these columns is altered to prevent issues further downstream
LIMMAout_annot_2 <- LIMMAout_sorted_2[sort(LIMMAout_sorted_2$P.Value,index.return=T)$ix,c(1,12,13,10,11,4,7,8)]
LIMMAout_annot_2<- LIMMAout_annot_2[!LIMMAout_annot_2$Gene=="",]# filtering van de lege genes
LIMMAout_annot_2
dim(LIMMAout_annot_2[abs(LIMMAout_annot_2$logFC) > 2 & LIMMAout_annot_2$adj.P.Val <= 0.0615913,]) # we vinden 250 genen die significante differentiele methylatie hebben tumour vs control
dim(LIMMAout_annot_2[LIMMAout_annot_2$logFC > 2 & LIMMAout_annot_2$adj.P.Val <= 0.0615913,]) # 182
dim(LIMMAout_annot_2[LIMMAout_annot_2$logFC < (-2) & LIMMAout_annot_2$adj.P.Val <= 0.0615913,]) # 68
significant_p_values <- LIMMAout_annot_2[abs(LIMMAout_annot_2$logFC) > 2 & LIMMAout_annot_2$adj.P.Val <= 0.0615913,]
dim(significant_p_values)
# saving results
save(significant_p_values, file= "Methylation_significant.Rda")
dim(significant_p_values)
load("Significant_output_annotation_transcription.Rda")# object noemt significant_p_values
load("Methylation_significant.Rda") #LIMMAout_annot_2
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
load("Significant_output_annotation_transcription.Rda")# object noemt significant_p_values
load("Methylation_significant.Rda") #LIMMAout_annot_2
dim(significant_p_values)
dim(LIMMAout_annot_2)
dim(significant_pvalues2)
head(significant_pvalues2)
head(significant_p_values)
sum(significant_pvalues2$hgnc_symbol%in%significant_pvalues$gene) # 321 genen die in allebei voorkomen
significant_pvalues
sum(significant_pvalues2$hgnc_symbol%in%significant_p_values$gene) # 321 genen die in allebei voorkomen
significant_p_values$gene
significant_p_values
significant_p_values$Gene
significant_pvalues2
sum(significant_pvalues2$hgnc_symbol%in%significant_p_values$Gene) # 321 genen die in allebei voorkomen
significant_pvalues2$hgnc_symbol
significant_p_values$Gene
sum(significant_pvalues2$hgnc_symbol%in%significant_p_values$Gene) # 0
sum(significant_p_values$Gene%in%significant_pvalues2$hgnc_symbol) # 0
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
load("Significant_output_annotation_transcription.Rda")# significant_pvalues2
load("Methylation_significant.Rda") # significant_p_values
dim(significant_pvalues2) # 40 11
dim(significant_p_values) #250 8
head(significant_pvalues2) # transcription
head(significant_p_values) # methylation
sum(significant_pvalues2$hgnc_symbol%in%significant_p_values$Gene) # 0 common genes
sessionInfo()
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
load("Significant_output_annotation_transcription.Rda")# significant_pvalues2
load("Methylation_significant.Rda") # significant_p_values
dim(significant_pvalues2) # 40 11
dim(significant_p_values) #250 8
head(significant_pvalues2) # transcription
head(significant_pvalues2) # transcription
write.table(significant_pvalues2$hgnc_symbol,file='transcription_genes.txt',row.names=FALSE,quote=FALSE,col.names=FALSE)
pos_logfold<- significant_pvalues2[significant_pvalues2$logFC > 2,]
neg_logfold<- significant_pvalues2[significant_pvalues2$logFC < (-2),]
pos_logfold<- significant_pvalues2[significant_pvalues2$logFC > 1,]
neg_logfold<- significant_pvalues2[significant_pvalues2$logFC < (-1),]
pos_logfold<- significant_pvalues2[significant_pvalues2$logFC >= 1,]
neg_logfold<- significant_pvalues2[significant_pvalues2$logFC <= (-1),]
dim(significant_pvalues2) # 40 11
significant_pvalues2$logFC
significant_pvalues2$adj.P.Val
#Transcription profiling of human breast tumors and their paired normal tissues
#desktop
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
## Load packages
library(affy)
library(arrayQualityMetrics)
library(ArrayExpress)
library(limma)
library(biomaRt)
BreastCancer <- ReadAffy() # If ArrayExpress does not work => use this
disease <- NULL
patients <- rep(1:43, each = 2)
for (i in pData(BreastCancer)$sample){
if((i %% 2) == 0) {
disease[i] <- 'Cancer'}
else{
disease[i] <- 'Normal'}
}
disease
patients
annotation <- data.frame(disease,patients)
# Preprocessing of the data
# rma function is used to perform background correction as well as quantile normalization
BreastCancerRMA<- affy::rma(BreastCancer,background=T) #  If TRUE, background correct using RMA background correction
# begin here again
annotation$patients <- factor(annotation$patients)
annotation$disease <- factor(annotation$disease)
## Differential expression by LIMMA
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~0+disease+patients, data= annotation)
colSums(design) # checking if this is correct
#patients toevoegen
colnames(design)[1:2]<-c("Cancer_tissue","normal_tissue")
fit <- lmFit(BreastCancerRMA,design)
cont.matrix <- makeContrasts(CancervsControl=Cancer_tissue-normal_tissue,levels=design)
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(BreastCancerRMA)))
significant_pvalues_1<- LIMMAout[LIMMAout$adj.P.Val<0.05 & abs(LIMMAout$logFC) >1,]
dim(significant_pvalues_1) # 40 probes statistical significant
head(significant_pvalues_1)
significant_pvalues_1
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t",skip=17,fill=T)
print(tail(annotation_BC))
annotation_BC <- annotation_BC[sort(annotation_BC$Composite.Element.Name,index.return=T)$ix,]
## Double check => "Assumption is the mother of all fuck up's ;)"
sum(annotation_BC$Composite.Element.Name==sort(rownames(LIMMAout)))
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(rownames(LIMMAout),index.return=T)$ix,]
dim(LIMMAout_sorted)
## Add gene names to LIMMA output
LIMMAout_sorted$gene <- annotation_BC$Composite.Element.Database.Entry.ensembl.
LIMMAout_annot <- LIMMAout_sorted[sort(LIMMAout_sorted$adj.P.Val,index.return=T)$ix,]
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
significant_pvalues<- LIMMAout_annot[LIMMAout_annot$adj.P.Val<0.05& abs(LIMMAout$logFC) >1,]
significant_pvalues
significant_pvalues
LIMMAout$logFC
significant_pvalues<- LIMMAout_annot[LIMMAout_annot$adj.P.Val<0.05& abs(LIMMAout_annot$logFC) >1,]
dim(significant_pvalues)
significant_pvalues
head(significant_pvalues)
tail(significant_pvalues)
affyids <- rownames(significant_pvalues)
ensembl <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
output_sign <-getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene_id','hgnc_symbol','chromosome_name', 'start_position', 'end_position'), #  is a vector of attributes that one wants to retrieve (= the output of the query).
filters = 'affy_hg_u133_plus_2', #  is a vector of filters that one wil use as input to the query.
values = affyids, # a vector of values for the filters
mart = ensembl)
significant_pvalues[,"hgnc_symbol"] <-NA
significant_pvalues[,"chromosome_name"] <-NA
significant_pvalues[,"start_position"] <-NA
significant_pvalues[,"end_position"] <-NA
# filtering of the zero entries
output_sign <- output_sign[!output_sign$hgnc_symbol=="",]
output_sign <- output_sign[!output_sign$affy_hg_u133_plus_2=="",]
count=1
significant_pvalues <- significant_pvalues[rownames(significant_pvalues)%in%output_sign$affy_hg_u133_plus_2,]
for (i in rownames(significant_pvalues)){
significant_pvalues$hgnc_symbol[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,3]
significant_pvalues$chromosome_name[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,4]
significant_pvalues$start_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,5]
significant_pvalues$end_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,6]
count=count+1
}
significant_pvalues2 <- significant_pvalues
dim(significant_pvalues2)
head(significant_pvalues2)
save(significant_pvalues2,file="Significant_output_annotation_transcription.Rda") # object noemt significant_pvalues2
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
load("Significant_output_annotation_transcription.Rda")# significant_pvalues2
load("Methylation_significant.Rda") # significant_p_values
dim(significant_pvalues2) # 40 11
dim(significant_p_values) #250 8
head(significant_pvalues2) # transcription
head(significant_p_values) # methylation
sum(significant_pvalues2$hgnc_symbol%in%significant_p_values$Gene) # 0 common genes
write.table(significant_pvalues2$hgnc_symbol,file='transcription_genes.txt',row.names=FALSE,quote=FALSE,col.names=FALSE)
pos_logfold<- significant_pvalues2[significant_pvalues2$logFC >= 1,]
neg_logfold<- significant_pvalues2[significant_pvalues2$logFC <= (-1),]
pos_logfold
write.table(pos_logfold$hgnc_symbol,file='transcription_genes_pos_logfold.txt',row.names=FALSE,quote=FALSE,col.names=FALSE)
write.table(neg_logfold$hgnc_symbol,file='transcription_genes_neg_logfold.txt',row.names=FALSE,quote=FALSE,col.names=FALSE)
#Transcription profiling of human breast tumors and their paired normal tissues
#desktop
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
## Load packages
library(affy)
library(arrayQualityMetrics)
library(ArrayExpress)
library(limma)
library(biomaRt)
BreastCancer <- ReadAffy() # If ArrayExpress does not work => use this
dim(pData(BreastCancer))
exprs(BreastCancer)
pData(BreastCancer)
disease <- NULL
patients <- rep(1:43, each = 2)
for (i in pData(BreastCancer)$sample){
if((i %% 2) == 0) {
disease[i] <- 'Cancer'}
else{
disease[i] <- 'Normal'}
}
disease
patients
annotation <- data.frame(disease,patients)
dim(exprs(BreastCancer))
# Preprocessing of the data
# rma function is used to perform background correction as well as quantile normalization
BreastCancerRMA<- affy::rma(BreastCancer,background=T) #  If TRUE, background correct using RMA background correction
# begin here again
annotation$patients <- factor(annotation$patients)
annotation$disease <- factor(annotation$disease)
annotation
## Differential expression by LIMMA
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~0+disease+patients, data= annotation)
colSums(design) # checking if this is correct
#patients toevoegen
colnames(design)[1:2]<-c("Cancer_tissue","normal_tissue")
fit <- lmFit(BreastCancerRMA,design)
cont.matrix <- makeContrasts(CancervsControl=Cancer_tissue-normal_tissue,levels=design)
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
?affy
?affy::rma
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(BreastCancerRMA)))
head(LIMMAout)
threshold.sign <- LIMMAout[LIMMAout$adj.P.Val<0.05,]
dim(threshold.sign)
with(LIMMAout, plot(logFC, -log10(P.Value), pch=20,main="Volcano plot"))
with(subset(threshold.sign),points(logFC, -log10(P.Value),pch=20,col="red"))
limma::plotMA(fit2, main= 'MA-plot')
hist(fit2$p.value, main= 'distributions of the p-values',xlab='p-values')
# Have a look at the results and search for other probesets for your DE genes
significant_pvalues<- LIMMAout[LIMMAout$adj.P.Val<0.05,]
dim(significant_pvalues) # 5333 probes statistical significant
significant_pvalues_1<- LIMMAout[LIMMAout$adj.P.Val<0.05 & abs(LIMMAout$logFC) >1,]
dim(significant_pvalues_1) # 40 probes statistical significant
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t",skip=17,fill=T)
annotation_BC[100:105,]
annotation_BC <- annotation_BC[sort(annotation_BC$Composite.Element.Name,index.return=T)$ix,]
## Double check => "Assumption is the mother of all fuck up's ;)"
sum(annotation_BC$Composite.Element.Name==sort(rownames(LIMMAout)))
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(rownames(LIMMAout),index.return=T)$ix,]
dim(LIMMAout_sorted)
## Add gene names to LIMMA output
LIMMAout_sorted$gene <- annotation_BC$Composite.Element.Database.Entry.ensembl.
LIMMAout_annot <- LIMMAout_sorted[sort(LIMMAout_sorted$adj.P.Val,index.return=T)$ix,]
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
significant_pvalues<- LIMMAout_annot[LIMMAout_annot$adj.P.Val<0.05& abs(LIMMAout_annot$logFC) >1,]
dim(significant_pvalues)
dim(significant_pvalues)
significant_pvalues
head(significant_pvalues)
dim(significant_pvalues)
affyids <- rownames(significant_pvalues)
ensembl <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
output_sign <-getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene_id','hgnc_symbol','chromosome_name', 'start_position', 'end_position'), #  is a vector of attributes that one wants to retrieve (= the output of the query).
filters = 'affy_hg_u133_plus_2', #  is a vector of filters that one wil use as input to the query.
values = affyids, # a vector of values for the filters
mart = ensembl)
significant_pvalues[,"hgnc_symbol"] <-NA
significant_pvalues[,"chromosome_name"] <-NA
significant_pvalues[,"start_position"] <-NA
significant_pvalues[,"end_position"] <-NA
# filtering of the zero entries
output_sign <- output_sign[!output_sign$hgnc_symbol=="",]
output_sign <- output_sign[!output_sign$affy_hg_u133_plus_2=="",]
count=1
significant_pvalues <- significant_pvalues[rownames(significant_pvalues)%in%output_sign$affy_hg_u133_plus_2,]
for (i in rownames(significant_pvalues)){
significant_pvalues$hgnc_symbol[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,3]
significant_pvalues$chromosome_name[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,4]
significant_pvalues$start_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,5]
significant_pvalues$end_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,6]
count=count+1
}
dim(significant_pvalues2)
significant_pvalues2 <- significant_pvalues
dim(significant_pvalues2)
dim(significant_pvalues_1) # 40 probes statistical significant
significant_pvalues_only <- LIMMAout_annot[LIMMAout_annot$adj.P.Val<0.05,]
dim(significant_pvalues_only)
significant_pvalues_only_pos <- LIMMAout_annot[LIMMAout_annot$adj.P.Val<0.05 & LIMMAout_annot$logFC >0,]
dim(significant_pvalues_only_pos)
significant_pvalues_only_neg <- LIMMAout_annot[LIMMAout_annot$adj.P.Val<0.05 & LIMMAout_annot$logFC <0,]
dim(significant_pvalues_only_neg)
significant_pvalues_only_pos
significant_pvalues<- LIMMAout_annot[LIMMAout_annot$adj.P.Val<0.05& abs(LIMMAout_annot$logFC) >1,]
significant_pvalues
dim(significant_pvalues)
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
