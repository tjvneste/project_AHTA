volcano_DPN<- ggplot(ttLate_DPN$table,aes(x=logFC,y=-log10(PValue),color=FDR<0.05)) + geom_point() + scale_color_manual(values=c("black","red"))
volcano_DPN
L2<-array(0,ncol(design))
names(L2)<-colnames(design)
L2[c(6,9)] <- 1
L2
late_OHT<-glmLRT(fit,contrast=L2)
ttLate_OHT<-topTags(late_OHT, n = nrow(dge)) # all genes
hist(ttLate_OHT$table$PValue,main="late_OHT",xlab="p-values")
summary(dtLate_OHT <- decideTestsDGE(late_OHT))
volcano_OHT<- ggplot(ttLate_OHT$table,aes(x=logFC,y=-log10(PValue),color=FDR<0.05)) + geom_point() + scale_color_manual(values=c("black","red"))
volcano_OHT
inter_DPN <- glmLRT(fit,coef="treatmentDPN:time48h")
ttInter_DPN<-topTags(inter_DPN, n = nrow(dge)) # all genes
hist(ttInter_DPN$table$PValue,main="interaction",xlab="p-values")
inter_DPN <- glmLRT(fit,coef="treatmentDPN:time48h")
ttInter_DPN<-topTags(inter_DPN, n = nrow(dge)) # all genes
hist(ttInter_DPN$table$PValue,main="interaction",xlab="p-values")
summary(dtInter_DPN <- decideTestsDGE(inter_DPN))
inter_OHT <- glmLRT(fit,coef="treatmentOHT:time48h")
ttInter_OHT<-topTags(inter_OHT, n = nrow(dge)) # all genes
hist(ttInter_OHT$table$PValue,main="interaction",xlab="p-values")
summary(dtInter_OHT <- decideTestsDGE(inter_OHT))
ttLate_DPN <- ttLate_DPN %>%
mutate(z = sign(logFC) * abs(qnorm(PValue/2)))
ttLate_DPN$table <- ttLate_DPN$table %>%
mutate(z = sign(logFC) * abs(qnorm(PValue/2)))
ttLate_DPN$table %>%
ggplot(aes(x=z)) +
geom_histogram(aes(y = ..density..), color = "black") +
stat_function(fun = dnorm,
args = list(
mean = 0,
sd=1)
)
fit <- glmQLFit(dge,design)
early_DPN <- glmQLFTest(fit,coef="treatmentDPN")
ttEarly_DPN<-topTags(early_DPN, n = nrow(dge)) # all genes
hist(ttEarly_DPN$table$PValue)
summary(dtEarly_DPN <- decideTestsDGE(early_DPN))
early_OHT <- glmQLFTest(fit,coef="treatmentOHT")
ttEarly_OHT<-topTags(early_OHT, n = nrow(dge)) # all genes
hist(ttEarly_OHT$table$PVal)
summary(dtEarly_OHT <- decideTestsDGE(early_OHT))
late_DPN<-glmQLFTest(fit,contrast=L)
ttLate_DPN<-topTags(late_DPN, n = nrow(dge)) # all genes
hist(ttLate_DPN$table$PValue)
summary(dtLate <- decideTestsDGE(late_DPN))
late_OHT<-glmQLFTest(fit,contrast=L2)
ttLate_OHT<-topTags(late_OHT, n = nrow(dge)) # all genes
hist(ttLate_OHT$table$PValue)
summary(dtLate <- decideTestsDGE(late_OHT))
inter <- glmQLFTest(fit,coef="treatmentDPN:time48h")
ttInter<-topTags(inter, n = nrow(dge)) # all genes
hist(ttInter$table$PValue)
summary(dtInter <- decideTestsDGE(inter))
inter <- glmQLFTest(fit,coef="treatmentOHT:time48h")
ttInter<-topTags(inter, n = nrow(dge)) # all genes
hist(ttInter$table$PValue)
summary(dtInter <- decideTestsDGE(inter))
inter <- glmQLFTest(fit,coef="treatmentOHT:time48h")
ttInter<-topTags(inter, n = nrow(dge)) # all genes
hist(ttInter$table$PValue)
inter <- glmQLFTest(fit,coef="treatmentOHT:time48h")
ttInter<-topTags(inter, n = nrow(dge)) # all genes
hist(ttInter$table$PValue)
```{r}
summary(dtInter <- decideTestsDGE(inter))
BiocManager::install("DESeq2")
library('DESeq2')
ds_matrix <- DESeqDataSetFromMatrix(countData = data,
colData = targets,
design = ~ PatientID + treatment*time)
vsd <- DESeq2::vst(ds_matrix)
plotPCA(vsd, intgroup = c("PatientID","treatment","time"))
ds_matrix <- DESeq(ds_matrix)
plotDispEsts(ds_matrix)
L <- matrix(0,nrow=6,ncol=length(resultsNames(ds_matrix)))
colnames(L)<-resultsNames(ds_matrix)
rownames(L)<-c("early_DPN","late_DPN","interaction_DPN","early_OHT","late_OHT","interaction_OHT")
L[1,5]<-1
L[2,c(5,8)] <- 1
L[3,8] <- 1
L[4,6]<-1
L[5,c(6,9)] <- 1
L[6,9]<-1
L
results<-apply(L,1,function(fit,contrast) results(fit, contrast=contrast),fit=ds_matrix)
head(results$early_DPN)
head(results(ds_matrix))
summary(results$early_DPN)
summary(results$late_DPN)
summary(results$interaction_DPN)
summary(results$early_OHT)
summary(results$late_OHT)
summary(results$interaction_OHT)
hist(results$early_DPN$pvalue,xlab="p-value")
hist(results$late_DPN$pvalue,xlab="p-value")
hist(results$interaction_DPN$pvalue,xlab="p-value")
hist(results$early_OHT$pvalue,xlab="p-value")
hist(results$late_OHT$pvalue,xlab="p-value")
hist(results$interaction_OHT$pvalue,xlab="p-value")
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
#Transcription profiling of human breast tumors and their paired normal tissues
#desktop
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
## Load packages
library(affy)
library(arrayQualityMetrics)
library(ArrayExpress)
library(limma)
library(siggenes)
library(biomaRt)
# load in the expressionFeatureSet object
BreastCancer <- ArrayExpress("E-GEOD-15852")
BreastCancer
BreastCancer
# load in the expressionFeatureSet object
BreastCancer <- ArrayExpress("E-GEOD-15852")
BreastCancer
## Load in the data
## Download data to your working directory
getAE("E-GEOD-15852", type = 'raw')
## Reads in all .cel files and takes phenoData from the ExpressionFeatureset we loaded using https_ArrayExpress
BreastCancer <- ReadAffy(phenoData=pData(BreastCancer))
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA")
## Load in the data
## Download data to your working directory
getAE("E-GEOD-15852", type = 'raw')
# load in the expressionFeatureSet object
BreastCancer <- ArrayExpress("E-GEOD-15852")
BreastCancer
?ArrayExpress
tempdir()
getwd
# load in the expressionFeatureSet object
BreastCancer <- ArrayExpress("E-GEOD-15852", path = "~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA")
#Transcription profiling of human breast tumors and their paired normal tissues
#desktop
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
# load in the expressionFeatureSet object
BreastCancer <- ArrayExpress("E-GEOD-15852")
BreastCancer
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/methylation/GSE101443_RAW")
## Load packages
library('lumi')
library('wateRmelon')
library('ChAMPdata')
methyldata <- readEPIC(getwd())
methyldata
hm450.controls
hm450.ordering
ID <- c('GSM2703232','GSM2703233', 'GSM2703234', 'GSM2703235', 'GSM2703236','GSM2703237', 'GSM2703238', 'GSM2703239')
methyldata
sampleNames(methyldata)
hm450.controls
assydata(methyldata)
methyldata
assayData(methyldata)
sampleNames(methyldata)
ID <- c('GSM2703232','GSM2703233', 'GSM2703234', 'GSM2703235', 'GSM2703236','GSM2703237', 'GSM2703238', 'GSM2703239')
condition <- c('Tumour_A','Normal_A','Tumour_B','Normal_B','Tumour_C','Normal_C','Tumour_D','Normal_D')
Patient <- c('A','A','B','B','C','C','D','D')
annotation <- data.frame(ID,condition,Patient)
## Have a look at the data and annotation
print(methyldata)
print(dim(methyldata))
print(annotation)
print(sum(is.na(exprs(methyldata)))) # 1918
print(head(betas(methyldata))) # The “betas” function will retreive the beta values ( = methylation percentages) and the “exprs” function will retreive the M-values.
## Change sampleNames to something more comprehensible
sampleNames(methyldata) <- annotation[,2]
sampleNames(methyldata)
print(head(betas(methyldata))) # The “betas” function will retreive the beta values ( = methylation percentages) and the “exprs” function will retreive the M-values.
print(head(exprs(methyldata)))
## Have a look at the data and annotation
print(methyldata)
## Remove NA values
methyldata <- methyldata[!(rowSums(is.na(exprs(methyldata)))>=1),]
methyldata
## Remove probes for which calling p-value is insufficient
methyldata.pf<-pfilter(methyldata) # removes the probes which we are not sure that are called correctly
## Comparison of average methylation between control and tumor samples
boxplot(betas(methyldata),las=2)
## Comparison of average methylation between control and tumor samples
boxplot(betas(methyldata))
,las=2
## Comparison of average methylation between control and tumor samples
boxplot(betas(methyldata),las=2)
meth_mean_tumour <- rep(0,8)
meth_mean_control <- rep(0,8)
for (i in 1:ncol(methyldata)){
if((i %% 2) == 0) { # even
meth_mean_control[i] <- mean(betas(methyldata)[,i])
} else {
meth_mean_tumour[i] <- mean(betas(methyldata)[,i])
}
}
meth_mean_tumour <- meth_mean_tumour[c(1,3,5,7)]
meth_mean_control <- meth_mean_control[c(2,4,6,8)]
t_test_res <- t.test(meth_mean_control,meth_mean_tumour,var.equal=F)
t_test_res
dat_boxplot <- data.frame(betas = c(meth_mean_control,meth_mean_control),
group = c('Tumour','Normal','Tumour','Normal','Tumour','Normal','Tumour','Normal'))
boxplot(betas~group,dat_boxplot,las=2)
meth_mean_tumour
meth_mean_control
dat_boxplot <- data.frame(betas = c(meth_mean_tumour,meth_mean_control),
group = c('Tumour','Tumour','Tumour','Tumour','Normal','Normal','Normal','Normal'))
boxplot(betas~group,dat_boxplot,las=2)
dat_boxplot
boxplot(betas~group,dat_boxplot,las=2)
boxplot(betas~group,dat_boxplot)
,las=2
boxplot(betas~group,dat_boxplot,las=2)
## Comparison of average methylation between control and tumor samples
boxplot(betas(methyldata),las=2)
meth_mean_tumour <- rep(0,8)
meth_mean_control <- rep(0,8)
for (i in 1:ncol(methyldata)){
if((i %% 2) == 0) { # even
meth_mean_control[i] <- mean(betas(methyldata)[,i])
} else {
meth_mean_tumour[i] <- mean(betas(methyldata)[,i])
}
}
meth_mean_control
meth_mean_tumour <- meth_mean_tumour[c(1,3,5,7)]
meth_mean_control <- meth_mean_control[c(2,4,6,8)]
t_test_res <- t.test(meth_mean_control,meth_mean_tumour,var.equal=F)
t_test_res
dat_boxplot <- data.frame(betas = c(meth_mean_tumour,meth_mean_control),
group = c('Tumour','Tumour','Tumour','Tumour','Normal','Normal','Normal','Normal'))
boxplot(betas~group,dat_boxplot,las=2)
dat_boxplot
methyldata.pf
methyldata
methyldata.pf
## Perform normalization including dye color adjustment
methyldata.dasen.pf <- dasen(methyldata.pf)
?dasen
## Make methylumi objects to check density and color bias adjustment
#transform both the non-normalized counts as the normalized counts to a MethyLumiM object
methyldataM <- as(methyldata.pf, 'MethyLumiM')
methyldataN <- as(methyldata.dasen.pf, 'MethyLumiM')
## Make QC plot
par(mfrow=c(2,2))
plotColorBias1D(methyldataM,channel="both",main="before")
plotColorBias1D(methyldataN,channel="both",main="after")
density(methyldataM,xlab="M-value",main="before")
density(methyldataN,xlab="M-value",main="after")
## Make QC plot
par(mfrow=c(2,2))
plotColorBias1D(infdataM,channel="both",main="before",xlab="Beta-value")
## Make QC plot
par(mfrow=c(2,2))
plotColorBias1D(infdataM,channel="both",main="before",xlab="Beta-value")
## Make QC plot
par(mfrow=c(2,2))
plotColorBias1D(methyldataM,channel="both",main="before",xlab="Beta-value")
plotColorBias1D(methyldataN,channel="both",main="after",xlab="Beta-value")
density(methyldataM,xlab="M-value",main="before")
density(methyldataN,xlab="M-value",main="after")
## Build design and contrasts
condition <- factor(as.character(c('Tumour','Normal','Tumour','Normal','Tumour','Normal','Tumour','Normal')))
patient <- factor(annotation$Patient)
design <- model.matrix(~0+condition)
design
colnames(design)[1:2] <- c("Control","Tumor")
cont.matrix <- makeContrasts(NvsS=Tumor-Control,levels=design)
## Limma
fit <- lmFit(methyldataN,design) # normalized data
methyldataN
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
volcanoplot(fit2)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(methyldata)))
head(LIMMAout)
sum(LIMMAout$adj.P.Val<0.05)
abs(LIMMAout$logFC)
sum(abs(LIMMAout$logFC)>2)
sum(LIMMAout$adj.P.Val<0.05&&abs(LIMMAout$logFC)>2)
LIMMAout[LIMMAout$adj.P.Val<0.05&&abs(LIMMAout$logFC)>2,]
sum(LIMMAout$adj.P.Val<0.05&&abs(LIMMAout$logFC)>2)
LIMMAout$adj.P.Val<0.05&&abs(LIMMAout$logFC)>2
LIMMAout[(LIMMAout$adj.P.Val<0.05)&&(abs(LIMMAout$logFC)>2),]
LIMMAout[(LIMMAout$adj.P.Val<0.05)&&(LIMMAout$logFC>2),]
LIMMAout[(LIMMAout$adj.P.Val<0.05)&&(LIMMAout$logFC<2),]
LIMMAout[(LIMMAout$adj.P.Val<0.05)&&(LIMMAout$logFC<-2),]
LIMMAout[(LIMMAout$adj.P.Val<0.05)&&(LIMMAout$logFC<(-2)),]
LIMMAout[(LIMMAout$adj.P.Val<0.05)&&(LIMMAout$logFC>(2)),]
abs(LIMMAout$logFC)>2
LIMMAout[abs(LIMMAout$logFC)>2,]
abs
?abs
abs(LIMMAout$logFC)
LIMMAout$logFC
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(methyldata)))
head(LIMMAout)
LIMMAout$logFC
abs(LIMMAout$logFC)
abs(LIMMAout$logFC) > 2
LIMMAout[abs(LIMMAout$logFC) > 2,]
LIMMAout[abs(LIMMAout$logFC) > 2 & LIMMAout$adj.P.Val< 0.05,]
length(LIMMAout[abs(LIMMAout$logFC) > 2 & LIMMAout$adj.P.Val< 0.05,])
dim(LIMMAout[abs(LIMMAout$logFC) > 2 & LIMMAout$adj.P.Val< 0.05,])
dim(LIMMAout[abs(LIMMAout$logFC) > 2 & LIMMAout$adj.P.Val< 0.05,])
# nu met Patient erbij
design2 <- model.matrix(~0+condition+patient)
colnames(design2)[1:2] <- c("Control","Tumor")
design2
cont.matrix2 <- makeContrasts(NvsS=Tumor-Control,levels=design2)
## Limma
fit_2 <- lmFit(methyldataN,design2) # normalized data
fit_2 <- contrasts.fit(fit_2,cont.matrix2)
fit_2 <- eBayes(fit_2)
LIMMAout_2 <- topTable(fit_2,adjust="BH",number=nrow(exprs(methyldata)))
head(LIMMAout_2)
dim(LIMMAout_2[abs(LIMMAout_2$logFC) > 2 & LIMMAout_2$adj.P.Val= 0.0615913,])
dim(LIMMAout_2[abs(LIMMAout_2$logFC) > 2 & LIMMAout_2$adj.P.Val == 0.0615913,])
dim(LIMMAout_2[abs(LIMMAout_2$logFC) > 2 & LIMMAout_2$adj.P.Val <= 0.0615913,])
## Check M-values for top results
exprs(methyldataN)[rownames(methyldataN)%in%rownames(head(LIMMAout_2)),]
betas(methyldataN)[rownames(methyldataN)%in%rownames(head(LIMMAout_2)),]
dim(LIMMAout_2[abs(LIMMAout_2$logFC) > 2 & LIMMAout_2$adj.P.Val <= 0.0615913,])
?par
## Differential methylation analysis: limma
############################
par(mfrow=c(1,1))
volcanoplot(fit2)
limma::plotMA(fit2)
## Load annotation and sort alphabetically on probe name
#https://www.bioconductor.org/packages/devel/data/experiment/manuals/ChAMPdata/man/ChAMPdata.pdf
data("probe.features") # this one?
annotation_MA <- probe.features
print(head(annotation_MA))
annotation_MA <- annotation_MA[sort(rownames(annotation_MA),index.return=T)$ix,]
## Check if all probes are present in both sets
dim(LIMMAout_2)
dim(annotation_MA)
sum(LIMMAout_2$Probe_ID%in%rownames(annotation_MA))
sum(rownames(annotation_MA)%in%LIMMAout_2$Probe_ID)
## Since more probes are present in the annotation file, remove unnecessary probes
annotation_MA <- annotation_MA[rownames(annotation_MA)%in%LIMMAout$Probe_ID,]
annotation_MA <- probe.features
## Check if all probes are present in both sets
dim(LIMMAout_2)
dim(annotation_MA) # annotation has more rows than Limma output
sum(LIMMAout_2$Probe_ID%in%rownames(annotation_MA))
sum(rownames(annotation_MA)%in%LIMMAout_2$Probe_ID)
annotation_MA <- annotation_MA[rownames(annotation_MA)%in%LIMMAout_2$Probe_ID,]
dim(annotation_MA)
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted_2 <- LIMMAout_2[sort(LIMMAout_2$Probe_ID,index.return=T)$ix,]
## Add gene names to LIMMA output
LIMMAout_sorted_2$Gene <- annotation_MA$gene
LIMMAout_sorted_2$Feature <- annotation_MA$feature
LIMMAout_sorted_2$Chrom <- annotation_MA$CHR
LIMMAout_sorted_2$Pos <- annotation_MA$MAPINFO
LIMMAout_sorted_2$Chrom <- as.character(LIMMAout_sorted$Chrom)
LIMMAout_sorted_2$Gene <- as.character(LIMMAout_sorted$Gene)
LIMMAout_sorted_2$Feature <- as.character(LIMMAout_sorted$Feature)
LIMMAout_sorted_2
# The data type for these columns is altered to prevent issues further downstream
LIMMAout_annot_2 <- LIMMAout_sorted_2[sort(LIMMAout_sorted_2$P.Value,index.return=T)$ix,c(1,12,13,10,11,4,7,8,5)]
# Sort on p-values to prevent errors in sorting due to equal FDR values
LIMMAout_annot_2<- LIMMAout_annot_2[!LIMMAout_annot_2$Gene=="",]# filtering van de lege genes
LIMMAout_annot_2
# The data type for these columns is altered to prevent issues further downstream
LIMMAout_annot_2 <- LIMMAout_sorted_2[sort(LIMMAout_sorted_2$P.Value,index.return=T)$ix,c(1,12,13,10,11,4,7,8)]
# Sort on p-values to prevent errors in sorting due to equal FDR values
LIMMAout_annot_2<- LIMMAout_annot_2[!LIMMAout_annot_2$Gene=="",]# filtering van de lege genes
LIMMAout_annot_2
dim(LIMMAout_annot_2)
dim(LIMMAout_annot_2[abs(LIMMAout_annot_2$logFC) > 2 & LIMMAout_annot_2$adj.P.Val <= 0.0615913,])
LIMMAout_annot_2[abs(LIMMAout_annot_2$logFC) > 2 & LIMMAout_annot_2$adj.P.Val <= 0.0615913,]
significant_p_values <- LIMMAout_annot_2[abs(LIMMAout_annot_2$logFC) > 2 & LIMMAout_annot_2$adj.P.Val <= 0.0615913,]
dim(significant_p_values)
significant_p_values
save(significant_p_values, file= "Methylation_significant.Rda")
?topTable
LIMMAout_2 <- topTable(fit_2,adjust="holm",number=nrow(exprs(methyldata)))
head(LIMMAout_2)
head(LIMMAout_2$adj.P.Val<0.05)
LIMMAout_2$adj.P.Val
## Limma
fit_2 <- lmFit(methyldataN,design2) # normalized data
fit_2 <- contrasts.fit(fit_2,cont.matrix2)
fit_2 <- eBayes(fit_2)
LIMMAout_2 <- topTable(fit_2,adjust="holm",number=nrow(exprs(methyldata)))
LIMMAout_2
LIMMAout_2 <- topTable(fit_2,adjust="BH",number=nrow(exprs(methyldata)))
LIMMAout_2
dim(LIMMAout_2[abs(LIMMAout_2$logFC) > 2 & LIMMAout_2$adj.P.Val <= 0.0615913,]) # 358 significante genen gevonden
## Check genic results
head(significant_p_values)
significant_p_values$Gene
## Select CpGs in promoter regions
LIMMAout_annot_prom <- significant_p_values[grepl("TSS",significant_p_values$Feature) | (significant_p_values$Feature=="1stExon"),]
head(LIMMAout_annot_prom)
dim(LIMMAout_annot_prom)
## Look for multiple CpG in promoter regions undergoing similar methylation differences
topgenes_prom <- unique(LIMMAout_annot_prom$Gene[1:10])
for (i in 1:length(topgenes_prom)){
LIMMAout_subset <- LIMMAout_annot_prom[(LIMMAout_annot_prom$Gene==topgenes_prom[i]) &
(LIMMAout_annot_prom$adj.P.Val<0.10),]
if(nrow(LIMMAout_subset)>1){
print(LIMMAout_subset[sort(LIMMAout_subset$Pos,index.return=T)$ix,])
}
}
LIMMAout_annot_prom$Gene
?write.table
write.table(LIMMAout_annot_prom$Gene,file='Promoter_genes.txt')
write.table(LIMMAout_annot_prom$Gene,file='Promoter_genes.txt',row.names=FALSE)
write.table(LIMMAout_annot_prom$Gene,file='Promoter_genes.txt',row.names=FALSE,quote=FALSE)
write.table(LIMMAout_annot_prom$Gene,file='Promoter_genes.txt',row.names=FALSE,quote=FALSE,col.names=FALSE)
write.table(significant_p_values$Gene,file='methylation_genes.txt',row.names=FALSE,quote=FALSE,col.names=FALSE)
dim(LIMMAout_2[LIMMAout_2$adj.P.Val <= 0.0615913,])
sort(significant_p_values$logFC)
sort(significant_p_values$logFC,decreasing=TRUE)
sort(significant_p_values,decreasing=TRUE)
$logFC
sort(significant_p_values$logFC,decreasing=TRUE)
significant_p_values$logFC[3.286706]
sort(significant_p_values$logFC,decreasing=TRUE)[0:10]
foldchanges<- sort(significant_p_values$logFC,decreasing=TRUE)[0:10]
foldchanges$in$significant_p_values$logFC
foldchanges%in%significant_p_values$logFC
significant_p_values$logFC%in%foldchanges
significant_p_values[significant_p_values$logFC%in%foldchanges,]
topten <- significant_p_values[significant_p_values$logFC%in%foldchanges,]
topten$Probe_ID
print(head(annotation_MA))
?probe.features
dim(LIMMAout_2[LIMMAout_2$logFC > 2 & LIMMAout_2$adj.P.Val <= 0.0615913,]) # 358 significante genen gevonden
dim(LIMMAout_2[LIMMAout_2$logFC < (-2) & LIMMAout_2$adj.P.Val <= 0.0615913,]) # 358 significante genen gevonden
251+107
dim(LIMMAout_annot_2[LIMMAout_annot_2$logFC > 2 & LIMMAout_annot_2$adj.P.Val <= 0.0615913,])
dim(LIMMAout_annot_2[LIMMAout_annot_2$logFC < (-2) & LIMMAout_annot_2$adj.P.Val <= 0.0615913,])
LIMMAout_annot_2[LIMMAout_annot_2$logFC < (-2) & LIMMAout_annot_2$adj.P.Val <= 0.0615913,]
## Check M-values for top results
exprs(methyldataN)[rownames(methyldataN)%in%rownames(head(LIMMAout_2)),]
dim(LIMMAout_2[abs(LIMMAout_2$logFC) > 2 & LIMMAout_2$adj.P.Val <= 0.0615913,]) # 358 significante genen gevonden
betas(methyldataN)[rownames(methyldataN)%in%rownames(head(LIMMAout_2)),]
LIMMAout_2[abs(LIMMAout_2$logFC) > 2 & LIMMAout_2$adj.P.Val <= 0.0615913,]
## Comparison of average methylation between control and tumor samples
boxplot(betas(methyldata),las=2)
meth_mean_tumour <- rep(0,8)
meth_mean_control <- rep(0,8)
for (i in 1:ncol(methyldata)){
if((i %% 2) == 0) { # even
meth_mean_control[i] <- mean(betas(methyldata)[,i])
} else {
meth_mean_tumour[i] <- mean(betas(methyldata)[,i])
}
}
meth_mean_tumour <- meth_mean_tumour[c(1,3,5,7)]
meth_mean_control <- meth_mean_control[c(2,4,6,8)]
t_test_res <- t.test(meth_mean_control,meth_mean_tumour,var.equal=F)
t_test_res
dat_boxplot <- data.frame(betas = c(meth_mean_tumour,meth_mean_control),
group = c('Tumour','Tumour','Tumour','Tumour','Normal','Normal','Normal','Normal'))
boxplot(betas~group,dat_boxplot,las=2)
## Check M-values for top results
exprs(methyldataN)[rownames(methyldataN)%in%rownames(head(LIMMAout_2)),]
betas(methyldataN)[rownames(methyldataN)%in%rownames(head(LIMMAout_2)),]
## Make QC plot
par(mfrow=c(2,2))
plotColorBias1D(methyldataM,channel="both",main="before",xlab="Beta-value")
plotColorBias1D(methyldataN,channel="both",main="after",xlab="Beta-value")
density(methyldataM,xlab="M-value",main="before")
density(methyldataN,xlab="M-value",main="after")
## Make QC plot
par(mfrow=c(2,2))
plotColorBias1D(methyldataM,channel="both",main="before",xlab="Beta-value")
plotColorBias1D(methyldataN,channel="both",main="after",xlab="Beta-value")
density(methyldataM,xlab="M-value",main="before")
density(methyldataN,xlab="M-value",main="after")
## Make QC plot
par(mfrow=c(1,2))
plotColorBias1D(methyldataM,channel="both",main="before",xlab="Beta-value")
plotColorBias1D(methyldataN,channel="both",main="after",xlab="Beta-value")
density(methyldataM,xlab="M-value",main="before")
density(methyldataN,xlab="M-value",main="after")
## Make methylumi objects to check density and color bias adjustment
#transform both the non-normalized counts as the normalized counts to a MethyLumiM object
methyldataM <- as(methyldata.pf, 'MethyLumiM')
methyldataN <- as(methyldata.dasen.pf, 'MethyLumiM')
## Make QC plot
par(mfrow=c(2,1))
density(methyldataM,xlab="M-value",main="before")
density(methyldataN,xlab="M-value",main="after")
density(methyldataM,xlab="M-value",main="before")
density(methyldataN,xlab="M-value",main="after")
## Differential methylation analysis: limma
############################
par(mfrow=c(1,1))
density(methyldataM,xlab="M-value",main="before")
density(methyldataN,xlab="M-value",main="after")
cont.matrix2 <- makeContrasts(TumourvsControl=Tumor-Control,levels=design2)
## Limma
fit_2 <- lmFit(methyldataN,design2) # normalized data
fit_2 <- contrasts.fit(fit_2,cont.matrix2)
fit_2 <- eBayes(fit_2)
volcanoplot(fit2)
limma::plotMA(fit2)
limma::plotMA(fit2)
?plotMA
limma::plotMA(fit2, main= 'MA-plot')
?volcanoplot
volcanoplot(fit2, style= 'p-value')
2+2
