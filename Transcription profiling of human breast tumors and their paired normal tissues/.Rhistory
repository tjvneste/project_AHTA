late_DPN<-glmQLFTest(fit,contrast=L)
ttLate_DPN<-topTags(late_DPN, n = nrow(dge)) # all genes
hist(ttLate_DPN$table$PValue)
summary(dtLate <- decideTestsDGE(late_DPN))
late_OHT<-glmQLFTest(fit,contrast=L2)
ttLate_OHT<-topTags(late_OHT, n = nrow(dge)) # all genes
hist(ttLate_OHT$table$PValue)
summary(dtLate <- decideTestsDGE(late_OHT))
inter <- glmQLFTest(fit,coef="treatmentDPN:time48h")
ttInter<-topTags(inter, n = nrow(dge)) # all genes
hist(ttInter$table$PValue)
summary(dtInter <- decideTestsDGE(inter))
inter <- glmQLFTest(fit,coef="treatmentOHT:time48h")
ttInter<-topTags(inter, n = nrow(dge)) # all genes
hist(ttInter$table$PValue)
summary(dtInter <- decideTestsDGE(inter))
inter <- glmQLFTest(fit,coef="treatmentOHT:time48h")
ttInter<-topTags(inter, n = nrow(dge)) # all genes
hist(ttInter$table$PValue)
inter <- glmQLFTest(fit,coef="treatmentOHT:time48h")
ttInter<-topTags(inter, n = nrow(dge)) # all genes
hist(ttInter$table$PValue)
```{r}
summary(dtInter <- decideTestsDGE(inter))
BiocManager::install("DESeq2")
library('DESeq2')
ds_matrix <- DESeqDataSetFromMatrix(countData = data,
colData = targets,
design = ~ PatientID + treatment*time)
vsd <- DESeq2::vst(ds_matrix)
plotPCA(vsd, intgroup = c("PatientID","treatment","time"))
ds_matrix <- DESeq(ds_matrix)
plotDispEsts(ds_matrix)
L <- matrix(0,nrow=6,ncol=length(resultsNames(ds_matrix)))
colnames(L)<-resultsNames(ds_matrix)
rownames(L)<-c("early_DPN","late_DPN","interaction_DPN","early_OHT","late_OHT","interaction_OHT")
L[1,5]<-1
L[2,c(5,8)] <- 1
L[3,8] <- 1
L[4,6]<-1
L[5,c(6,9)] <- 1
L[6,9]<-1
L
results<-apply(L,1,function(fit,contrast) results(fit, contrast=contrast),fit=ds_matrix)
head(results$early_DPN)
head(results(ds_matrix))
summary(results$early_DPN)
summary(results$late_DPN)
summary(results$interaction_DPN)
summary(results$early_OHT)
summary(results$late_OHT)
summary(results$interaction_OHT)
hist(results$early_DPN$pvalue,xlab="p-value")
hist(results$late_DPN$pvalue,xlab="p-value")
hist(results$interaction_DPN$pvalue,xlab="p-value")
hist(results$early_OHT$pvalue,xlab="p-value")
hist(results$late_OHT$pvalue,xlab="p-value")
hist(results$interaction_OHT$pvalue,xlab="p-value")
library(tidyverse)
library(tidyverse)
library(GEOquery)
library(edgeR)
library(DESeq2)
library(pheatmap)
library(edgeR)
library(DESeq2)
library(pheatmap)
library(stageR)
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/methylation/GSE101443_RAW")
## Load packages
library('lumi')
library('wateRmelon')
library('ChAMPdata')
load('Methylation_significant.Rda')
significant_p_values
dim(significant_p_values)
significant_p_values[significant_p_values$logFC > 2 & significant_p_values$adj.P.Val <= 0.0615913,]
pos_logfold<- significant_p_values[significant_p_values$logFC > 2 & significant_p_values$adj.P.Val <= 0.0615913,]
neg_logfold<- significant_p_values[significant_p_values$logFC < (-2) & significant_p_values$adj.P.Val <= 0.0615913,]
neg_logfold
dim(neg_logfold)
write.table(pos_logfold$Gene,file='methylation_genes_pos_logfold.txt',row.names=FALSE,quote=FALSE,col.names=FALSE)
write.table(neg_logfold$Gene,file='methylation_genes_neg_logfold.txt',row.names=FALSE,quote=FALSE,col.names=FALSE)
#Transcription profiling of human breast tumors and their paired normal tissues
#desktop
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
## Load packages
library(affy)
library(arrayQualityMetrics)
library(ArrayExpress)
library(limma)
library(siggenes)
library(biomaRt)
# load in the expressionFeatureSet object
BreastCancer <- ArrayExpress("E-GEOD-15852")
?ArrayExpress
## Download data to your working directory
getAE("E-GEOD-15852", type = 'raw')
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/Prac2_AHTA_Data/Infinium")
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/practicum_1")
## Load packages
library(affy)
library(arrayQualityMetrics)
library(ArrayExpress)
library(limma)
library(siggenes)
## Load in the data
MouseExp <- ArrayExpress("E-MTAB-3242")
## Reads in all .cel files and takes phenoData from the ExpressionFeatureset we loaded using https_ArrayExpress
MouseExp <- ReadAffy(phenoData=pData(MouseExp))
## Have a look to the data you just loaded
head(exprs(MouseExp))
pData(MouseExp)
breast <- ArrayExpress("E-GEOD-15852")
?ArrayExpress
breast <- ArrayExpress("E-GEOD-15852")
ReadAffy()
#Transcription profiling of human breast tumors and their paired normal tissues
#desktop
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
ReadAffy()
BreastCancer <- ReadAffy()
#pData returns the phenotypic data we loaded using ReadAffy
pData(BreastCancer)
# exprs functions returns the intensity values for each sample (column)
exprs(BreastCancer)
#pData returns the phenotypic data we loaded using ReadAffy
pData(BreastCancer)
# load in the expressionFeatureSet object
BreastCancer <- ArrayExpress("E-GEOD-15852")
BreastCancer
## Reads in all .cel files and takes phenoData from the ExpressionFeatureset we loaded using https_ArrayExpress
MouseExp <- ReadAffy(phenoData=pData(MouseExp))
## Reads in all .cel files and takes phenoData from the ExpressionFeatureset we loaded using https_ArrayExpress
BreastCancer <- ReadAffy(phenoData=pData(BreastCancer))
BreastCancer
#pData returns the phenotypic data we loaded using ReadAffy
pData(BreastCancer)
# exprs functions returns the intensity values for each sample (column)
exprs(BreastCancer)
head(pData(BreastCancerRMA))
head(pData(BreastCancer))
## Download data to your working directory
getAE("S-ECPF-GEOD-15852", type = 'raw')
## Download data to your working directory
getAE("E-GEOD-15852", type = 'raw')
## Download data to your working directory
getAE("E-GEOD-15852", type = 'raw)
## Download data to your working directory
getAE("E-GEOD-15852", type = 'raw)))
## Download data to your working directory
getAE("E-GEOD-15852")
load("Significant_output_annotation_transcription.Rda")
significant_pvalues
# load in the expressionFeatureSet object
BreastCancer <- ArrayExpress("E-GEOD-15852")
?ArrayExpress
#Transcription profiling of human breast tumors and their paired normal tissues
#desktop
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
BreastCancer <- ReadAffy()
#pData returns the phenotypic data we loaded using ReadAffy
pData(BreastCancer)
## Quality Control on raw data
####################
# this is used to perform an explorative quality evaluation of the orginal data and the log transformed data
## arrayQualityMetrics (open "index.html" file for a full overview of the output)
arrayQualityMetrics(BreastCancer,outdir="/Users/tristanvanneste/Documents/Bioinformatics/project Tristan/raw_test",force=T)
#Transcription profiling of human breast tumors and their paired normal tissues
#desktop
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
## Load packages
library(affy)
library(arrayQualityMetrics)
library(ArrayExpress)
library(limma)
library(siggenes)
library(biomaRt)
BreastCancer <- ReadAffy()
# exprs functions returns the intensity values for each sample (column)
exprs(BreastCancer)
# exprs functions returns the intensity values for each sample (column)
dim(exprs(BreastCancer))
#pData returns the phenotypic data we loaded using ReadAffy
pData(BreastCancer)
# load in the expressionFeatureSet object
BreastCancer <- ArrayExpress("E-GEOD-15852")
BreastCancer <- ReadAffy() # bcs data won't load
#pData returns the phenotypic data we loaded using ReadAffy
pData(BreastCancer)
dim(exprs(BreastCancer))
74+86
?rep
rep('normal',42)
meta_data<- read.table('E-GEOD-15852.sdrf.txt')
meta_data<- read.table('E-GEOD-15852.sdrf.txt',header=TRUE)
?read.table
meta_data<- read.table('E-GEOD-15852.sdrf.txt',header=TRUE,sep = "")
meta_data<- read.table('E-GEOD-15852.sdrf.txt',header=TRUE,sep = "",quote = "\")
## Quality Control on raw data
####################
# this is used to perform an explorative quality evaluation of the orginal data and the log transformed data
## arrayQualityMetrics (open "index.html" file for a full overview of the output)
arrayQualityMetrics(BreastCancer,outdir="/Users/tristanvanneste/Documents/Bioinformatics/project Tristan/raw_test",force=T)
arrayQualityMetrics(BreastCancer,outdir="/Users/tristanvanneste/Documents/Bioinformatics/project Tristan/rawlog",force=T,do.logtransform=T)
# Preprocessing of the data
# rma function is used to perform background correction as well as quantile normalization
BreastCancerRMA<- affy::rma(BreastCancer,background=T)
limma::plotDensities(exprs(BreastCancerRMA))
## Quality Control on preprocessed data
## QC post preprocessing
arrayQualityMetrics(BreastCancerRMA,outdir="/Users/tristanvanneste/Documents/Bioinformatics/project Tristan/RMA",force=T)  			#RMA produces log-transformed data
head(pData(BreastCancerRMA))
annot <- factor(pData(BreastCancerRMA)[,7]) # normal breast tissue and breast tumor tissue
annot
length(annot) # 86
annotb <- as.double(annot==annot[4]) # we want the breast tumor tissue to be one and the control to be zero
annotb
# the problem is we don't account for the persons but can we? bcs we have 86 samples? YES
pData(BreastCancerRMA)$Patients<- pData(BreastCancerRMA)$Hybridization.Name
pData(BreastCancerRMA)$Patients <- gsub('Normal', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients <- gsub('Cancer', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients <- gsub('T', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients <- gsub('N', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients <- gsub(' ', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients # this is column with patients every patient has to occur 2 times in this column
sum(grepl('BC0155', pData(BreastCancerRMA)$Patients))
sum(grepl('BC0117', pData(BreastCancerRMA)$Patients))
ID <- factor(pData(BreastCancerRMA)$Patients)
length(levels(ID))
## Differential expression by LIMMA
# why LIMMA? => Limma has more power than SAM
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~0+annot+ID)
colSums(design) # checking if this is correct
#patients toevoegen
colnames(design)[1:2]<-c("Cancer_breast_tissue","normal_breast_tissue")
fit <- lmFit(BreastCancerRMA,design)
cont.matrix <- makeContrasts(NvsS=Cancer_breast_tissue-normal_breast_tissue,levels=design)
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(BreastCancerRMA)))
head(LIMMAout)
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout)
significant_pvalues_1<- LIMMAout[LIMMAout$adj.P.Val<0.05,]
dim(significant_pvalues_1)
head(significant_pvalues_1)
tail(significant_pvalues_1)
## Optional: Differential expression analysis with MAS preprocessed data
####################
# we were working on the probe level not at level of genes per se
# most genes are represented by a single probeset on a microarray, for some genes multiple probesets are present.
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t",skip=17,fill=T)
print(tail(annotation_BC))
annotation_BC[100:105,]
annotation_BC <- annotation_BC[sort(annotation_BC$Composite.Element.Name,index.return=T)$ix,]
## Check if all probes are present in both sets
dim(annotation_BC)
dim(LIMMAout)
## Double check => "Assumption is the mother of all fuck up's ;)"
sum(annotation_BC$Composite.Element.Name==sort(rownames(LIMMAout)))
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(rownames(LIMMAout),index.return=T)$ix,]
dim(LIMMAout_sorted)
## Add gene names to LIMMA output
LIMMAout_sorted$gene <- annotation_BC$Composite.Element.Database.Entry.ensembl.
LIMMAout_annot <- LIMMAout_sorted[sort(LIMMAout_sorted$adj.P.Val,index.return=T)$ix,]
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
significant_pvalues<- LIMMAout_annot[LIMMAout_annot$adj.P.Val<0.05,]
dim(significant_pvalues)
head(significant_pvalues)
tail(significant_pvalues)
affyids <- rownames(significant_pvalues)
output_sign <-getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene_id','hgnc_symbol','chromosome_name', 'start_position', 'end_position'), #  is a vector of attributes that one wants to retrieve (= the output of the query).
filters = 'affy_hg_u133_plus_2', #  is a vector of filters that one wil use as input to the query.
values = affyids, # a vector of values for the filters
mart = ensembl)
significant_pvalues[,"hgnc_symbol"] <-NA
significant_pvalues[,"chromosome_name"] <-NA
significant_pvalues[,"start_position"] <-NA
significant_pvalues[,"end_position"] <-NA
# filtering of the zero entries
output_sign <- output_sign[!output_sign$hgnc_symbol=="",]
output_sign <- output_sign[!output_sign$affy_hg_u133_plus_2=="",]
count=1
significant_pvalues <- significant_pvalues[rownames(significant_pvalues)%in%output_sign$affy_hg_u133_plus_2,]
for (i in rownames(significant_pvalues)){
significant_pvalues$hgnc_symbol[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,3]
significant_pvalues$chromosome_name[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,4]
significant_pvalues$start_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,5]
significant_pvalues$end_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,6]
count=count+1
}
save(significant_pvalues,file="Significant_output_annotation_transcription.Rda") # object noemt significant_pvalues
load("Significant_output_annotation_transcription.Rda")
significant_pvalues
meta_data<- read.table('E-GEOD-15852.sdrf.txt',header=TRUE,sep = "")
meta_data<- read.table('E-GEOD-15852.sdrf.txt',header=TRUE,sep = "\t")
meta_data<- read.table('E-GEOD-15852.sdrf.txt',header=TRUE,sep = "\t",fill = TRUE)
meta_data
head(meta_data)
meta_data<- read.table('E-GEOD-15852.sdrf.txt',header=TRUE,sep = "\t")
meta_data<- read.table('E-GEOD-15852.sdrf.txt',header=TRUE,sep = "\t",quote="")
meta_data<- read.table('E-GEOD-15852.sdrf.txt',sep = "\t",quote="")
meta_data<- read.table('E-GEOD-15852.sdrf.txt',header=TRUE,sep = "\t",quote="")
meta_data<- read.table('E-GEOD-15852.sdrf.txt',header=TRUE,sep = "\t",fill=TRUE)
meta_data
meta_data<- read.table('E-GEOD-15852.sdrf.txt',header=TRUE,fill=TRUE)
meta_data
meta_data<- read.table('E-GEOD-15852.sdrf.txt',header=TRUE,sep = "  ",fill=TRUE)
meta_data<- read.table('E-GEOD-15852.sdrf.txt',header=TRUE,sep = "",fill=TRUE)
meta_data
meta_data<- read.table('E-GEOD-15852.sdrf.txt',header=TRUE,sep = "")
meta_data<- read.table('E-GEOD-15852.sdrf.txt',header=TRUE,sep = "\t")
#pData returns the phenotypic data we loaded using ReadAffy
pData(BreastCancer)
dim(exprs(BreastCancer))
pData(BreastCancer)$sample
annotation <- []
annotation <- []
annotation <- NULL
annotation
annotation[1]
annotation[2]
for (i in pData(BreastCancer)){
if((pData(BreastCancer)$sample[i] %% 2) == 0) {
annotation[i] <- 'Cancer'}
else{
annotation[i] <- 'Normal'}
}
annotation
annotation <- NULL
for (i in pData(BreastCancer)$sample){
if(i %% 2) == 0) {
annotation[i] <- 'Cancer'}
else{
annotation[i] <- 'Normal'}
}
annotation <- NULL
for (i in pData(BreastCancer)$sample){
if((i %% 2) == 0) {
annotation[i] <- 'Cancer'}
else{
annotation[i] <- 'Normal'}
}
annotation
teller=0
teller=1
patients <- NULL
rep(1:2,43)
rep(1:43,2)
IDS <-rep(1:43,2)
IDS[1]
IDS[43]
IDS[44]
rep(1:4, each = 2)
annotation <- NULL
patients <- rep(1:43, each = 2)
for (i in pData(BreastCancer)$sample){
if((i %% 2) == 0) {
annotation[i] <- 'Cancer'}
else{
annotation[i] <- 'Normal'}
}
annotation
patients
test <- as.data.frame([annotation,patients])
?DataFrame
test <- DataFrame([annotation,patients])
disease <- NULL
patients <- rep(1:43, each = 2)
for (i in pData(BreastCancer)$sample){
if((i %% 2) == 0) {
disease[i] <- 'Cancer'}
else{
disease[i] <- 'Normal'}
}
disease
patients
test <- data.frame(annotation,patients)
test
annotation <- data.frame(annotation,patients)
dim(exprs(BreastCancer))
## Quality Control on raw data
####################
# this is used to perform an explorative quality evaluation of the orginal data and the log transformed data
## arrayQualityMetrics (open "index.html" file for a full overview of the output)
arrayQualityMetrics(BreastCancer,outdir="~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues/raw",force=T)
?affy::rma
# Preprocessing of the data
# rma function is used to perform background correction as well as quantile normalization
BreastCancerRMA<- affy::rma(BreastCancer,background=T) #  If TRUE, background correct using RMA background correction
limma::plotDensities(exprs(BreastCancerRMA))
2+2
plotDensities
?plotDensities
limma::plotDensities(exprs(BreastCancerRMA))
plotDensities(exprs(BreastCancerRMA))
head(pData(BreastCancerRMA))
head(exprss(BreastCancerRMA))
head(exprs(BreastCancerRMA))
head(exprs(BreastCancer))
annotation
length(annotation) # 86
dim(annotation) # 86
annotation$patients
annotation$patients <- factor(annotation$patients)
annotation$patients
annotation$annotation
annotation$annotation <- factor(annotation$annotation)
annotation
## Differential expression by LIMMA
# why LIMMA? => Limma has more power than SAM
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~0+annotation+patients)
?model.matriox
?model.matrix
## Differential expression by LIMMA
# why LIMMA? => Limma has more power than SAM
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~0+annotation+patients, data= annotation)
design
colSums(design) # checking if this is correct
#patients toevoegen
colnames(design)[1:2]<-c("Cancer_tissue","normal_tissue")
design
fit <- lmFit(BreastCancerRMA,design)
cont.matrix <- makeContrasts(CancervsControl=Cancer_tissue-normal_tissue,levels=design)
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
volcanoplot(fit2)
2+
3
volcanoplot(fit2)
par(mfrow=c(1,1))
volcanoplot(fit2)
limma::plotMA(fit2, main= 'MA-plot')
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(BreastCancerRMA)))
head(LIMMAout)
# Have a look at the results and search for other probesets for your DE genes
significant_pvalues_1<- LIMMAout[LIMMAout$adj.P.Val<0.05 & abs(LIMMAout$logFC) >2,]
head(significant_pvalues_1)
dim(significant_pvalues_1)
LIMMAout[abs(LIMMAout$logFC) >2,]
LIMMAout[LIMMAout$logFC >2,]
LIMMAout$logFC
maximum(LIMMAout$logFC)
max(LIMMAout$logFC)
min(LIMMAout$logFC)
# Have a look at the results and search for other probesets for your DE genes
significant_pvalues_1<- LIMMAout[LIMMAout$adj.P.Val<0.05 & abs(LIMMAout$logFC) >1.5,]
dim(significant_pvalues_1)
head(significant_pvalues_1)
# Have a look at the results and search for other probesets for your DE genes
significant_pvalues<- LIMMAout[LIMMAout$adj.P.Val<0.05,]
dim(significant_pvalues_1)
dim(significant_pvalues)
significant_pvalues_1<- LIMMAout[LIMMAout$adj.P.Val<0.05 & abs(LIMMAout$logFC) >1,]
dim(significant_pvalues_1) # 9 probes statistical significant
significant_pvalues_2<- LIMMAout[LIMMAout$adj.P.Val<0.05 & abs(LIMMAout$logFC) >1.5,]
dim(significant_pvalues_2) # 40 probes statistical significant
volcanoplot(fit2)
?volcanoplot
volcanoplot(fit)
volcanoplot(fit2)
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t",skip=17,fill=T)
print(tail(annotation_BC))
annotation_BC[100:105,]
annotation_BC <- annotation_BC[sort(annotation_BC$Composite.Element.Name,index.return=T)$ix,]
## Check if all probes are present in both sets
dim(annotation_BC)
dim(LIMMAout)
## Double check => "Assumption is the mother of all fuck up's ;)"
sum(annotation_BC$Composite.Element.Name==sort(rownames(LIMMAout)))
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(rownames(LIMMAout),index.return=T)$ix,]
dim(LIMMAout_sorted)
## Add gene names to LIMMA output
LIMMAout_sorted$gene <- annotation_BC$Composite.Element.Database.Entry.ensembl.
LIMMAout_annot <- LIMMAout_sorted[sort(LIMMAout_sorted$adj.P.Val,index.return=T)$ix,]
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
significant_pvalues<- LIMMAout_annot[LIMMAout_annot$adj.P.Val<0.05& abs(LIMMAout$logFC) >1,]
dim(significant_pvalues)
head(significant_pvalues)
tail(significant_pvalues)
affyids <- rownames(significant_pvalues)
output_sign <-getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene_id','hgnc_symbol','chromosome_name', 'start_position', 'end_position'), #  is a vector of attributes that one wants to retrieve (= the output of the query).
filters = 'affy_hg_u133_plus_2', #  is a vector of filters that one wil use as input to the query.
values = affyids, # a vector of values for the filters
mart = ensembl)
significant_pvalues<-test1
test1<-significant_pvalues
test1
load("Significant_output_annotation_transcription.Rda")
significant_pvalues
significant_pvalues[abs(significant_pvalues$logFC>1),]
significant_pvalues[abs(significant_pvalues$logFC)>1,]
test1
dim(test1)
dim(significant_pvalues)
dim(significant_pvalues[abs(significant_pvalues$logFC)>1,])
biologisch_relevant <- significant_pvalues[abs(significant_pvalues$logFC)>1,]
fit <- lmFit(BreastCancerRMA,design)
cont.matrix <- makeContrasts(CancervsControl=Cancer_tissue-normal_tissue,levels=design)
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
volcanoplot(fit2)
