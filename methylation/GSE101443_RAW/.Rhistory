genefilter
rowVars
rowVars()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("genefilter")
library(genefilter)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("genefilter")
library(genefilter)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("genefilter")
libraary(genefilter)
library(genefilter)
# heatmap in R
library(GSE5859Subset)
data(GSE5859Subset
data(GSE5859Subset)
# heatmap in R
library(GSE5859Subset)
data(GSE5859Subset)
install.packages("matrixStats")
library(matrixStats)
?rowMads ##we use mads due to a outlier sample
library(gplots)
install.packages("gplots")
library(gplots)
rv <- rowMads(geneExpression)
idx <- order(-rv)[1:25]
heatmap.2(geneExpression[idx,])
heatmap.2(geneExpression[idx,],trace="none",lablCol=sampleInfo$group)
heatmap.2(geneExpression[idx,],trace="none",labCol=sampleInfo$group)
set.seed(17)
m = nrow(geneExpression)
n = ncol(geneExpression)
x = matrix(rnorm(m*n),m,n)
g = factor(sampleInfo$g )
?rowttest
install.packages("DescTools")
BiocManager::install("remotes")
library('remotes')
BiocManager::install("rformassspectrometry/MsCoreUtils")
BiocManager::install("rformassspectrometry/MsCoreUtils")
BiocManager::install("rformassspectrometry/MsCoreUtils")
library('rformassspectrometry/MsCoreUtils')
library('MsCoreUtils')
BiocManager::install("rformassspectrometry/QFeatures")
library('remotes')
library('MsCoreUtils')
BiocManager::install("rformassspectrometry/MsCoreUtils")
library('MsCoreUtils')
BiocManager::install("rformassspectrometry/QFeatures")
BiocManager::install("rformassspectrometry/QFeatures")
BiocManager::install("statomics/msqrob2")
library('statomics/msqrob2')
library('msqrob2')
version
library(tidyverse)
library(tidyverse)
library(limma)
library(QFeatures)
library(QFeatures)
library(msqrob2)
library(QFeatures)
library(msqrob2)
library(plotly)
peptidesFile <- "https://raw.githubusercontent.com/statOmics/SGA2020/data/quantification/heart/peptides.txt"
ecols <- MSnbase::grepEcols(
peptidesFile,
"Intensity ",
split = "\t")
pe <- readQFeatures(
table = peptidesFile,
fnames = 1,
ecol = ecols,
name = "peptideRaw", sep="\t")
pe <- readQFeatures(
table = peptidesFile,
fnames = 1,
ecol = ecols,
name = "peptideRaw", sep="\t")
pe
pe[["peptideRaw"]]
colData(pe)$location <- substr(
colnames(pe[["peptideRaw"]]),
11,
11) %>%
unlist %>%
as.factor
colData(pe)$tissue <- substr(
colnames(pe[["peptideRaw"]]),
12,
12) %>%
unlist %>%
as.factor
colData(pe)$patient <- substr(
colnames(pe[["peptideRaw"]]),
13,
13) %>%
unlist %>%
as.factor
```{r}
rowData(pe[["peptideRaw"]])$nNonZero <- rowSums(assay(pe[["peptideRaw"]]) > 0)
pe <- zeroIsNA(pe, "peptideRaw") # convert 0 to NA
MSnbase::plotNA(assay(pe[["peptideRaw"]])) +
xlab("Peptide index (ordered by data completeness)")
pe <- logTransform(pe, base = 2, i = "peptideRaw", name = "peptideLog")
limma::plotDensities(assay(pe[["peptideLog"]]))
pe[["peptideLog"]] <-
pe[["peptideLog"]][rowData(pe[["peptideLog"]])$Proteins
%in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins),]
pe[["peptideLog"]] %>%
rowData %>%
names
pe[["peptideLog"]] <- pe[["peptideLog"]][rowData(pe[["peptideLog"]])$
Potential.contaminant != "+", ]
pe[["peptideLog"]] <- pe[["peptideLog"]][rowData(pe[["peptideLog"]])$nNonZero >= 2, ]
nrow(pe[["peptideLog"]])
pe <- normalize(pe, i = "peptideLog", method = "quantiles", name = "peptideNorm")
limma::plotDensities(assay(pe[["peptideNorm"]]))
boxplot(assay(pe[["peptideNorm"]]), col = palette()[-1],
main = "Peptide distribtutions after normalisation", ylab = "intensity")
limma::plotMDS(assay(pe[["peptideNorm"]]),
col = colData(pe)$location:colData(pe)$tissue %>%
as.numeric,
labels = colData(pe) %>%
rownames %>%
substr(start = 11, stop = 13)
)
pe <- aggregateFeatures(pe,
i = "peptideNorm",
fcol = "Proteins",
na.rm = TRUE,
name = "proteinRobust",
fun = MsCoreUtils::robustSummary)
plotMDS(assay(pe[["proteinRobust"]]),
col = colData(pe)$location:colData(pe)$tissue %>%
as.numeric,
labels = colData(pe) %>%
rownames %>%
substr(start = 11, stop = 13)
)
pe <- msqrob(
object = pe,
i = "proteinRobust",
formula = ~ location*tissue + patient)
getCoef(rowData(pe[["proteinRobust"]])$msqrobModels[[2]])
L <- makeContrast(
c(
"tissueV = 0",
"tissueV + locationR:tissueV = 0",
"tissueV + 0.5*locationR:tissueV = 0","locationR:tissueV = 0"),
parameterNames =
rowData(pe[["proteinRobust"]])$msqrobModels[[2]] %>%
getCoef %>%
names
)
pe <- omnibusTest(pe, "proteinRobust", L)
source("https://raw.githubusercontent.com/statOmics/SGA2020/gh-pages/assets/topFeaturesOmnibus.R")
pe <- omnibusTest(pe, "proteinRobust", L)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
pe <- omnibusTest(pe, "proteinRobust", L)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
pe <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L, overwrite=TRUE)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
pe <- omnibusTest(object = pe, "proteinRobust", L, overwrite =TRUE)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$"tissueV + locationR:tissueV",
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
source("https://raw.githubusercontent.com/statOmics/SGA2020/gh-pages/assets/topFeaturesOmnibus.R")
pe <- omnibusTest(object = pe, "proteinRobust", L, overwrite =TRUE)
pe2 <- omnibusTest(object = pe, "proteinRobust", L, overwrite =TRUE)
rowData(pe[["proteinRobust"]])$omnibusTest
colnames(rowData(pe[["proteinRobust"]])$omnibusTest)
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$omnibusTest$tissueV+locationR.tissueV,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$omnibusTest,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
volcanoLeft <- ggplot(rowData(pe[["proteinRobust"]])$omnibusTest,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcanoLeft
rowData(pe[["proteinRobust"]])$omnibusTest
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.)
pe2 <- hypothesisTest(object = pe, i = "proteinRobust", contrast = L, overwrite=TRUE)
sigNamesLeft <- rowData(pe[["proteinRobust"]])$tissueV %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$tissueV %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibustest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$tissueV %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
sigNamesLeft <- rowData(pe[["proteinRobust"]])$omnibusTest %>%
rownames_to_column("proteinRobust") %>%
filter(adjPval<0.05) %>%
pull(proteinRobust)
heatmap(assay(pe[["proteinRobust"]])[sigNamesLeft, ])
rowData(pe[["proteinRobust"]])$omnibusTest
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
dim()
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
dim(.)
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
length(.)
rowData(pe[["proteinRobust"]])$tissueV %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
length(.)
rowData(pe[["proteinRobust"]])$omnibusTest %>%
cbind(.,rowData(pe[["proteinRobust"]])$Protein.names) %>%
na.exclude %>%
filter(adjPval<0.05) %>%
arrange(pval)  %>%
knitr::kable(.) %>%
length(.)
```{r,warning=FALSE}
X <- model.matrix(~ location*tissue + patient, colData(pe))
covarUnscaled <- solve(t(X) %*% X)
varContrasts <- t(L)%*%covarUnscaled%*%L %>%
diag
varContrasts
sqrt(varContrasts)
X
27/64
0.25*0.25*0.25
1/64
0.75*0.75*0.75
2*4*2*4*4
2*4*2*4*2
97+48
sraInfo <- read.csv("SraRunInfoElegans.csv")
library(tidyverse)
library(tidyverse)
library(Rsubread)
library("GEOquery")
sraInfo <- read.csv("SraRunInfoElegans.csv")
sraInfo <- read.csv("SraRunInfo.csv")
pdata <- merge(pdata, sraInfo, by = "SampleName")
sraInfo
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
## Load packages
library(affy)
library(arrayQualityMetrics)
library(ArrayExpress)
library(limma)
library(siggenes)
# load in the expressionFeatureSet object
BreastCancer <- ArrayExpress("E-GEOD-15852")
BreastCancer
# exprs functions returns the intensity values for each sample (column)
exprs(BreastCancer)
limma::plotDensities(exprs(BreastCancer)) # check this further
## Reads in all .cel files and takes phenoData from the ExpressionFeatureset we loaded using https_ArrayExpress
BreastCancer <- ReadAffy(phenoData=pData(BreastCancer))
# Preprocessing of the data
# rma function is used to perform background correction as well as quantile normalization
BreastCancerRMA<- affy::rma(BreastCancer,background=T)
limma::plotDensities(exprs(BreastCancerRMA))
# now can perform SAM or LIMMA to get the differentially expressed genes
#SAM
head(pData(BreastCancerRMA))
annot <- factor(pData(BreastCancerRMA)[,7]) # normal breast tissue and breast tumor tissue
annot
length(annot) # 86
## Differential expression by SAM
annotb <- as.double(annot==annot[4]) # we want the breast tumor tissue to be one and the control to be zero
annotb
sam.out_RMA <- sam(exprs(BreastCancerRMA),annotb)
# 559 identified genes with 0.03 falsely called genes or FDR of  2.95e-05
summary(sam.out_RMA,3.8)
sam.out_RMA
# 559 identified genes with 0.03 falsely called genes or FDR of  2.95e-05
summary(sam.out_RMA,3.8)
pData(BreastCancerRMA)$Patients<- pData(BreastCancerRMA)$Hybridization.Name
pData(BreastCancerRMA)$Patients <- gsub('Normal', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients <- gsub('Cancer', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients <- gsub('T', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients <- gsub('N', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients <- gsub(' ', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients # this is column with patients every patient has to occur 2 times in this column
sum(grepl('BC0155', pData(BreastCancerRMA)$Patients))
sum(grepl('BC0117', pData(BreastCancerRMA)$Patients))
ID <- factor(pData(BreastCancerRMA)$Patients)
# vragen of we dit in ons model moeten opnemen wnt we missen dan wel veel vrijheidsgraden
ID
## Differential expression by LIMMA
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~0+annot)
colnames(design)<-c("Cancer_breast_tissue","normal_breast_tissue")
fit <- lmFit(BreastCancerRMA,design)
cont.matrix <- makeContrasts(NvsS=Cancer_breast_tissue-normal_breast_tissue,levels=design)
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
volcanoplot(fit2)
limma::plotMA(fit2)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(BreastCancerRMA)))
head(LIMMAout)
## Check intensity values for top results
exprs(BreastCancerRMA)[rownames(exprs(BreastCancerRMA))%in%rownames(head(LIMMAout)),]
rowMeans(exprs(BreastCancerRMA)[rownames(exprs(BreastCancerRMA))%in%rownames(head(LIMMAout)),c(1,6,7)])
rowMeans(exprs(BreastCancerRMA)[rownames(exprs(BreastCancerRMA))%in%rownames(head(LIMMAout)),2:5])
# 559 identified genes with 0.03 falsely called genes or FDR of  2.95e-05
summary(sam.out_RMA,3.8)
head(LIMMAout)
# 559 identified genes with 0.03 falsely called genes or FDR of  2.95e-05
summary(sam.out_RMA,3.8)
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t",skip=17,fill=T)
print(head(annotation_BC))
annotation_BC <- annotation_BC[sort(annotation_BC$Composite.Element.Name,index.return=T)$ix,]
## Check if all probes are present in both sets
dim(annotation_BC)
dim(LIMMAout)
## Double check => "Assumption is the mother of all fuck up's ;)"
sum(annotation_BC$Composite.Element.Name==sort(rownames(LIMMAout)))
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(rownames(LIMMAout),index.return=T)$ix,]
## Add gene names to LIMMA output
LIMMAout_sorted$gene <- annotation_BC$Composite.Element.Database.Entry.ensembl.
LIMMAout_annot <- LIMMAout_sorted[sort(LIMMAout_sorted$adj.P.Val,index.return=T)$ix,]
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
sum(table(l*)) # no idea what this is for?
LIMMAout_annot[LIMMAout_annot$gene=="ENSG00000119888",]
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/methylation/GSE101443_RAW")
#https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE101443
## Load packages
library('lumi')
library('wateRmelon')
library('ChAMPdata')
methyldata <- readEPIC(getwd())
ID <- c('GSM2703232','GSM2703233', 'GSM2703234', 'GSM2703235', 'GSM2703236','GSM2703237', 'GSM2703238', 'GSM2703239')
condition <- c('Tumour_A','Normal_A','Tumour_B','Normal_B','Tumour_C','Normal_C','Tumour_D','Normal_D')
annotation <- data.frame(ID,condition)
## Change sampleNames to something more comprehensible
sampleNames(methyldata) <- annotation[,2]
sampleNames(methyldata)
## Remove NA values
methyldata <- methyldata[!(rowSums(is.na(exprs(methyldata)))>=1),]
## Remove probes for which calling p-value is insufficient
methyldata.pf<-pfilter(methyldata)
## Comparison of average methylation between control and tumor samples
boxplot(betas(methyldata),las=2)
meth_mean_tumour <- rep(0,8)
meth_mean_control <- rep(0,8)
for (i in 1:ncol(methyldata)){
if((i %% 2) == 0) { # even
meth_mean_control[i] <- mean(betas(methyldata)[,i])
} else {
meth_mean_tumour[i] <- mean(betas(methyldata)[,i])
}
}
meth_mean_tumour <- meth_mean_tumour[c(1,3,5,7)]
meth_mean_control <- meth_mean_control[c(2,4,6,8)]
t_test_res <- t.test(meth_mean_control,meth_mean_tumour,var.equal=F)
t_test_res
dat_boxplot <- data.frame(betas = c(meth_mean_control,meth_mean_control),
group = c('Tumour','Normal','Tumour','Normal','Tumour','Normal','Tumour','Normal'))
boxplot(betas~group,dat_boxplot,las=2)
## Perform normalization including dye color adjustment
methyldata.dasen.pf <- dasen(methyldata.pf)
## Make methylumi objects to check density and color bias adjustment
#transform both the non-normalized counts as the normalized counts to a MethyLumiM object
methyldataM <- as(methyldata.pf, 'MethyLumiM')
methyldataN <- as(methyldata.dasen.pf, 'MethyLumiM')
## Build design and contrasts
des <- factor(as.character(c('Tumour','Normal','Tumour','Normal','Tumour','Normal','Tumour','Normal')))
design <- model.matrix(~0+des)
colnames(design) <- c("Normal","Tumor")
cont.matrix <- makeContrasts(NvsS=Tumor-Normal,levels=design)
## Limma
fit <- lmFit(methyldataN,design) # normalized data
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(methyldata)))
head(LIMMAout)
## Check M-values for top results
exprs(methyldataN)[rownames(methyldataN)%in%rownames(head(LIMMAout)),]
## Load annotation and sort alphabetically on probe name
#https://www.bioconductor.org/packages/devel/data/experiment/manuals/ChAMPdata/man/ChAMPdata.pdf
#data("probe.features.epic")
data("probe.features") # this one?
annotation_MA <- probe.features
annotation_MA <- annotation_MA[sort(rownames(annotation_MA),index.return=T)$ix,]
## Since more probes are present in the annotation file, remove unnecessary probes
annotation_MA <- annotation_MA[rownames(annotation_MA)%in%LIMMAout$Probe_ID,]
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(LIMMAout$Probe_ID,index.return=T)$ix,]
## Add gene names to LIMMA output
LIMMAout_sorted$Gene <- annotation_MA$gene
LIMMAout_sorted$Feature <- annotation_MA$feature
LIMMAout_sorted$Chrom <- annotation_MA$CHR
LIMMAout_sorted$Pos <- annotation_MA$MAPINFO
LIMMAout_sorted$Chrom <- as.character(LIMMAout_sorted$Chrom)
LIMMAout_sorted$Gene <- as.character(LIMMAout_sorted$Gene)
LIMMAout_sorted$Feature <- as.character(LIMMAout_sorted$Feature)
# The data type for these columns is altered to prevent issues further downstream
LIMMAout_annot <- LIMMAout_sorted[sort(LIMMAout_sorted$P.Value,index.return=T)$ix,c(1,12,13,10,11,4,7,8,5)]
# Sort on p-values to prevent errors in sorting due to equal FDR values
LIMMAout_annot
## Select CpGs in genic regions
sum(LIMMAout_annot$adj.P.Val<0.05)
sum(LIMMAout_annot$adj.P.Val[LIMMAout_annot$Gene!=""]<0.05)
LIMMAout_annot_gene <- LIMMAout_annot[LIMMAout_annot$Gene!="",]
## Check genic results
head(LIMMAout_annot_gene)
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
## Select CpGs in genic regions
sum(LIMMAout_annot$adj.P.Val<0.05)
sum(LIMMAout_annot$adj.P.Val[LIMMAout_annot$Gene!=""]<0.05)
LIMMAout_annot_gene <- LIMMAout_annot[LIMMAout_annot$Gene!="",]
## Check genic results
head(LIMMAout_annot_gene)
LIMMAout_annot_gene[0:50,]
# 559 identified genes with 0.03 falsely called genes or FDR of  2.95e-05
summary(sam.out_RMA,3.8)
## Differential expression by LIMMA
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~0+annot)
colnames(design)<-c("Cancer_breast_tissue","normal_breast_tissue")
fit <- lmFit(BreastCancerRMA,design)
cont.matrix <- makeContrasts(NvsS=Cancer_breast_tissue-normal_breast_tissue,levels=design)
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(BreastCancerRMA)))
head(LIMMAout)
## Double check => "Assumption is the mother of all fuck up's ;)"
sum(annotation_BC$Composite.Element.Name==sort(rownames(LIMMAout)))
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(rownames(LIMMAout),index.return=T)$ix,]
## Add gene names to LIMMA output
LIMMAout_sorted$gene <- annotation_BC$Composite.Element.Database.Entry.ensembl.
LIMMAout_annot <- LIMMAout_sorted[sort(LIMMAout_sorted$adj.P.Val,index.return=T)$ix,]
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
