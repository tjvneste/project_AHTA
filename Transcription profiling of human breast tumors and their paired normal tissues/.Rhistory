early_DPN <- glmQLFTest(fit,coef="treatmentDPN")
ttEarly_DPN<-topTags(early_DPN, n = nrow(dge)) # all genes
hist(ttEarly_DPN$table$PValue)
early_DPN <- glmQLFTest(fit,coef="treatmentDPN")
ttEarly_DPN<-topTags(early_DPN, n = nrow(dge)) # all genes
hist(ttEarly_DPN$table$PValue)
```{r}
summary(dtEarly_DPN <- decideTestsDGE(early_DPN))
early_OHT <- glmQLFTest(fit,coef="treatmentOHT")
ttEarly_OHT<-topTags(early_OHT, n = nrow(dge)) # all genes
hist(ttEarly_OHT$table$PVal)
summary(dtEarly_OHT <- decideTestsDGE(early_OHT))
late_DPN<-glmQLFTest(fit,contrast=L)
ttLate_DPN<-topTags(late_DPN, n = nrow(dge)) # all genes
hist(ttLate_DPN$table$PValue)
summary(dtLate <- decideTestsDGE(late_DPN))
late_OHT<-glmQLFTest(fit,contrast=L2)
ttLate_OHT<-topTags(late_OHT, n = nrow(dge)) # all genes
late_OHT<-glmQLFTest(fit,contrast=L2)
# late treatment for OHT
L2<-array(0,ncol(design))
names(L2)<-colnames(design)
L2[c(6,9)] <- 1
L2
late_OHT<-glmQLFTest(fit,contrast=L2)
ttLate_OHT<-topTags(late_OHT, n = nrow(dge)) # all genes
hist(ttLate_OHT$table$PValue)
summary(dtLate <- decideTestsDGE(late_OHT))
library(edgeR)
library(tidyverse)
library(GEOquery)
# working directory
setwd("~/Documents/Bioinformatics/Statistical genomics")
data <- read.table('GSE37211_count_table.txt')
# Omission of 1 sample based on low RNA quality
#
sra <- read.csv('SraRunInfoparathyroid.csv')
new_samples <- unique(sra$SampleName)
#sra$SampleName==new_samples
sra_new<- sra[!duplicated(sra$SampleName),]
dim(sra_new)
sra_new
test <- getGEO('GSE37211')
library(edgeR)
library(tidyverse)
library(tidyverse)
library(GEOquery)
# working directory
setwd("~/Documents/Bioinformatics/Statistical genomics")
data <- read.table('GSE37211_count_table.txt')
# Omission of 1 sample based on low RNA quality
#
sra <- read.csv('SraRunInfoparathyroid.csv')
dim(sra)
length(unique(sra$SampleName)) # 23 er zaten dubbels in de RNA
new_samples <- unique(sra$SampleName)
sra_new<- sra[!duplicated(sra$SampleName),]
dim(sra_new)
sra_new
test <- getGEO('GSE37211')
test
pdata <- pData(test[[1]])
dim(pdata)
pdata
pdata$SampleName <- rownames(pdata) %>% as.factor
length(pdata$SampleName)
head(pdata)[1:6,]
colnames(data) <- pdata$SampleName
dim(data)
PatientID <- pdata$characteristics_ch1
treatment <- pdata$characteristics_ch1.2
time <- pdata$characteristics_ch1.3
PatientID <- gsub('patient: ','',PatientID)
PatientID<- as.factor(PatientID)
time<-as.factor(time)
time <- gsub('time: ','',time)
treatment <- gsub('agent: ','',treatment)
treatment<- as.factor(treatment)
targets <- data.frame(PatientID,treatment,time)
targets
design
dge<-DGEList(data)
dge$samples
design <- model.matrix( ~ PatientID + treatment*time, data = targets)
design
keep <- filterByExpr(dge, design)
dge <- dge[keep, ,keep.lib.sizes=FALSE]
dge<-calcNormFactors(dge)
dge$samples
plotMDS(dge, top = 500,col=as.double(targets$PatientID))
dge <- estimateDisp(dge, design,robust = TRUE)
plotBCV(dge)
fit <- glmFit(dge, design)
lrt_DPN <- glmLRT(fit, coef = "treatmentDPN")
summary(dtEarly <- decideTestsDGE(lrt_DPN))
ttAll_DPN <- topTags(lrt_DPN, n = nrow(dge)) # all genes
hist(ttAll_DPN$table$PValue) #
tt_DPN <- topTags(lrt_DPN, n = nrow(dge), p.value = 0.05) # genes with adj.p<0.05
nrow(tt_DPN) # 5
lrt_OHT <- glmLRT(fit, coef = "treatmentOHT")
summary(dtEarly_OHT <- decideTestsDGE(lrt_OHT))
ttAll_OHT <- topTags(lrt_OHT, n = nrow(dge)) # all genes
hist(ttAll_OHT$table$PValue) #
lrt_DPN <- glmLRT(fit, coef = "treatmentDPN")
summary(dtEarly <- decideTestsDGE(lrt_DPN))
ttAll_DPN <- topTags(lrt_DPN, n = nrow(dge)) # all genes
hist(ttAll_DPN$table$PValue)
lrt_OHT <- glmLRT(fit, coef = "treatmentOHT")
summary(dtEarly_OHT <- decideTestsDGE(lrt_OHT))
ttAll_OHT <- topTags(lrt_OHT, n = nrow(dge)) # all genes
hist(ttAll_OHT$table$PValue) #
tt_OHT <- topTags(lrt_OHT, n = nrow(dge), p.value = 0.05) # genes with adj.p<0.05
nrow(tt_OHT) # 0
library(ggplot2)
volcano <- ggplot(ttAll_DPN$table,aes(x=logFC,y=-log10(PValue),color=FDR<0.05)) + geom_point() + scale_color_manual(values=c("black","red"))
volcano
plotSmear(lrt_DPN, de.tags = row.names(tt_DPN$table))
library(pheatmap)
pheatmap(cpm(dge,log=TRUE)[rownames(tt$table)[1:5],])
pheatmap(cpm(dge,log=TRUE)[rownames(tt_DPN$table)[1:5],])
# late treatment for DPN
L<-array(0,ncol(design))
names(L)<-colnames(design)
L[c(5,8)] <- 1
L
late_DPN<-glmLRT(fit,contrast=L)
ttLate_DPN<-topTags(late_DPN, n = nrow(dge)) # all genes
hist(ttLate_DPN$table$PValue,main="late_DPN",xlab="p-values")
summary(dtLate_DPN <- decideTestsDGE(late_DPN))
volcano_DPN<- ggplot(ttLate_DPN$table,aes(x=logFC,y=-log10(PValue),color=FDR<0.05)) + geom_point() + scale_color_manual(values=c("black","red"))
volcano_DPN
L2<-array(0,ncol(design))
names(L2)<-colnames(design)
L2[c(6,9)] <- 1
L2
late_OHT<-glmLRT(fit,contrast=L2)
ttLate_OHT<-topTags(late_OHT, n = nrow(dge)) # all genes
hist(ttLate_OHT$table$PValue,main="late_OHT",xlab="p-values")
summary(dtLate_OHT <- decideTestsDGE(late_OHT))
volcano_OHT<- ggplot(ttLate_OHT$table,aes(x=logFC,y=-log10(PValue),color=FDR<0.05)) + geom_point() + scale_color_manual(values=c("black","red"))
volcano_OHT
inter_DPN <- glmLRT(fit,coef="treatmentDPN:time48h")
ttInter_DPN<-topTags(inter_DPN, n = nrow(dge)) # all genes
hist(ttInter_DPN$table$PValue,main="interaction",xlab="p-values")
inter_DPN <- glmLRT(fit,coef="treatmentDPN:time48h")
ttInter_DPN<-topTags(inter_DPN, n = nrow(dge)) # all genes
hist(ttInter_DPN$table$PValue,main="interaction",xlab="p-values")
summary(dtInter_DPN <- decideTestsDGE(inter_DPN))
inter_OHT <- glmLRT(fit,coef="treatmentOHT:time48h")
ttInter_OHT<-topTags(inter_OHT, n = nrow(dge)) # all genes
hist(ttInter_OHT$table$PValue,main="interaction",xlab="p-values")
summary(dtInter_OHT <- decideTestsDGE(inter_OHT))
ttLate_DPN <- ttLate_DPN %>%
mutate(z = sign(logFC) * abs(qnorm(PValue/2)))
ttLate_DPN$table <- ttLate_DPN$table %>%
mutate(z = sign(logFC) * abs(qnorm(PValue/2)))
ttLate_DPN$table %>%
ggplot(aes(x=z)) +
geom_histogram(aes(y = ..density..), color = "black") +
stat_function(fun = dnorm,
args = list(
mean = 0,
sd=1)
)
fit <- glmQLFit(dge,design)
early_DPN <- glmQLFTest(fit,coef="treatmentDPN")
ttEarly_DPN<-topTags(early_DPN, n = nrow(dge)) # all genes
hist(ttEarly_DPN$table$PValue)
summary(dtEarly_DPN <- decideTestsDGE(early_DPN))
early_OHT <- glmQLFTest(fit,coef="treatmentOHT")
ttEarly_OHT<-topTags(early_OHT, n = nrow(dge)) # all genes
hist(ttEarly_OHT$table$PVal)
summary(dtEarly_OHT <- decideTestsDGE(early_OHT))
late_DPN<-glmQLFTest(fit,contrast=L)
ttLate_DPN<-topTags(late_DPN, n = nrow(dge)) # all genes
hist(ttLate_DPN$table$PValue)
summary(dtLate <- decideTestsDGE(late_DPN))
late_OHT<-glmQLFTest(fit,contrast=L2)
ttLate_OHT<-topTags(late_OHT, n = nrow(dge)) # all genes
hist(ttLate_OHT$table$PValue)
summary(dtLate <- decideTestsDGE(late_OHT))
inter <- glmQLFTest(fit,coef="treatmentDPN:time48h")
ttInter<-topTags(inter, n = nrow(dge)) # all genes
hist(ttInter$table$PValue)
summary(dtInter <- decideTestsDGE(inter))
inter <- glmQLFTest(fit,coef="treatmentOHT:time48h")
ttInter<-topTags(inter, n = nrow(dge)) # all genes
hist(ttInter$table$PValue)
summary(dtInter <- decideTestsDGE(inter))
inter <- glmQLFTest(fit,coef="treatmentOHT:time48h")
ttInter<-topTags(inter, n = nrow(dge)) # all genes
hist(ttInter$table$PValue)
inter <- glmQLFTest(fit,coef="treatmentOHT:time48h")
ttInter<-topTags(inter, n = nrow(dge)) # all genes
hist(ttInter$table$PValue)
```{r}
summary(dtInter <- decideTestsDGE(inter))
BiocManager::install("DESeq2")
library('DESeq2')
ds_matrix <- DESeqDataSetFromMatrix(countData = data,
colData = targets,
design = ~ PatientID + treatment*time)
vsd <- DESeq2::vst(ds_matrix)
plotPCA(vsd, intgroup = c("PatientID","treatment","time"))
ds_matrix <- DESeq(ds_matrix)
plotDispEsts(ds_matrix)
L <- matrix(0,nrow=6,ncol=length(resultsNames(ds_matrix)))
colnames(L)<-resultsNames(ds_matrix)
rownames(L)<-c("early_DPN","late_DPN","interaction_DPN","early_OHT","late_OHT","interaction_OHT")
L[1,5]<-1
L[2,c(5,8)] <- 1
L[3,8] <- 1
L[4,6]<-1
L[5,c(6,9)] <- 1
L[6,9]<-1
L
results<-apply(L,1,function(fit,contrast) results(fit, contrast=contrast),fit=ds_matrix)
head(results$early_DPN)
head(results(ds_matrix))
summary(results$early_DPN)
summary(results$late_DPN)
summary(results$interaction_DPN)
summary(results$early_OHT)
summary(results$late_OHT)
summary(results$interaction_OHT)
hist(results$early_DPN$pvalue,xlab="p-value")
hist(results$late_DPN$pvalue,xlab="p-value")
hist(results$interaction_DPN$pvalue,xlab="p-value")
hist(results$early_OHT$pvalue,xlab="p-value")
hist(results$late_OHT$pvalue,xlab="p-value")
hist(results$interaction_OHT$pvalue,xlab="p-value")
library(tidyverse)
library(tidyverse)
library(GEOquery)
library(edgeR)
library(DESeq2)
library(pheatmap)
library(edgeR)
library(DESeq2)
library(pheatmap)
library(stageR)
#Transcription profiling of human breast tumors and their paired normal tissues
#desktop
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
## Load packages
library(affy)
library(arrayQualityMetrics)
library(ArrayExpress)
library(limma)
library(biomaRt)
BreastCancer <- ReadAffy() # If ArrayExpress does not work => use this
dim(pData(BreastCancer))
exprs(BreastCancer)
pData(BreastCancer)
disease <- NULL
patients <- rep(1:43, each = 2)
for (i in pData(BreastCancer)$sample){
if((i %% 2) == 0) {
disease[i] <- 'Cancer'}
else{
disease[i] <- 'Normal'}
}
disease
patients
annotation <- data.frame(disease,patients)
dim(exprs(BreastCancer))
# Preprocessing of the data
# rma function is used to perform background correction as well as quantile normalization
BreastCancerRMA<- affy::rma(BreastCancer,background=T) #  If TRUE, background correct using RMA background correction
# begin here again
annotation$patients <- factor(annotation$patients)
annotation$disease <- factor(annotation$disease)
annotation
## Differential expression by LIMMA
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~0+disease+patients, data= annotation)
colSums(design) # checking if this is correct
#patients toevoegen
colnames(design)[1:2]<-c("Cancer_tissue","normal_tissue")
fit <- lmFit(BreastCancerRMA,design)
cont.matrix <- makeContrasts(CancervsControl=Cancer_tissue-normal_tissue,levels=design)
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(BreastCancerRMA)))
head(LIMMAout)
hist(fit2$p.value, main= 'distributions of the p-values',xlab='p-values')
# Have a look at the results and search for other probesets for your DE genes
significant_pvalues<- LIMMAout[LIMMAout$adj.P.Val<0.05,]
dim(significant_pvalues) # 5333 probes statistical significant
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t",skip=17,fill=T)
print(tail(annotation_BC))
annotation_BC[100:105,]
annotation_BC <- annotation_BC[sort(annotation_BC$Composite.Element.Name,index.return=T)$ix,]
## Check if all probes are present in both sets
dim(annotation_BC)
dim(LIMMAout)
## Double check => "Assumption is the mother of all fuck up's ;)"
sum(annotation_BC$Composite.Element.Name==sort(rownames(LIMMAout)))
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(rownames(LIMMAout),index.return=T)$ix,]
dim(LIMMAout_sorted)
## Add gene names to LIMMA output
LIMMAout_sorted$gene <- annotation_BC$Composite.Element.Database.Entry.ensembl.
LIMMAout_annot <- LIMMAout_sorted[sort(LIMMAout_sorted$adj.P.Val,index.return=T)$ix,]
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
dim(LIMMAout_annot)
significant_pvalues<- LIMMAout_annot[LIMMAout_annot$adj.P.Val<0.05& abs(LIMMAout_annot$logFC) >1,]
dim(significant_pvalues) # 40
adjusted_pvalues<- LIMMAout_annot[LIMMAout_annot$adj.P.Val<0.05,]
dim(adjusted_pvalues) #
affyids <- rownames(adjusted_pvalues)
ensembl <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
output_sign <-getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene_id','hgnc_symbol','chromosome_name', 'start_position', 'end_position'), #  is a vector of attributes that one wants to retrieve (= the output of the query).
filters = 'affy_hg_u133_plus_2', #  is a vector of filters that one wil use as input to the query.
values = affyids, # a vector of values for the filters
mart = ensembl)
adjusted_pvalues[,"hgnc_symbol"] <-NA
adjusted_pvalues[,"chromosome_name"] <-NA
adjusted_pvalues[,"start_position"] <-NA
adjusted_pvalues[,"hgnc_symbol"] <-NA
adjusted_pvalues[,"chromosome_name"] <-NA
adjusted_pvalues[,"start_position"] <-NA
adjusted_pvalues[,"end_position"] <-NA
# filtering of the zero entries
output_sign <- output_sign[!output_sign$hgnc_symbol=="",]
output_sign <- output_sign[!output_sign$affy_hg_u133_plus_2=="",]
count=1
adjusted_pvalues <- adjusted_pvalues[rownames(adjusted_pvalues)%in%output_sign$affy_hg_u133_plus_2,]
for (i in rownames(adjusted_pvalues)){
adjusted_pvalues$hgnc_symbol[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,3]
adjusted_pvalues$chromosome_name[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,4]
adjusted_pvalues$start_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,5]
adjusted_pvalues$end_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,6]
count=count+1
}
dim(adjusted_pvalues)
head(adjusted_pvalues)
save(adjusted_pvalues,file="adjusted_pvalues_annotation_transcription.Rda") # object noemt adjusted_pvalues
write.table(adjusted_pvalues$hgnc_symbol,file='transcription_genes_adjusted_pvalues.txt',row.names=FALSE,quote=FALSE,col.names=FALSE)
pos_adj <- adjusted_pvalues[adjusted_pvalues$logFC>0,]
dim(pos_adj)
write.table(pos_adj$hgnc_symbol,file='transcription_genes_adjusted_pvalues_pos.txt',row.names=FALSE,quote=FALSE,col.names=FALSE)
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
load("adjusted_pvalues_annotation_transcription.Rda")
load("Methylation_significant.Rda") # significant_p_values
head(adjusted_pvalues)
sum(significant_p_values$Gene%in%adjusted_pvalues$hgnc_symbol) # 0 common genes
significant_p_values$Gene
length(significant_p_values$Gene)
sum(significant_p_values$Gene%in%adjusted_pvalues$hgnc_symbol) # 0 common genes
length(adjusted_pvalues$hgnc_symbol)
sum(significant_p_values$Gene%in%adjusted_pvalues$hgnc_symbol) # 0 common genes
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/methylation/GSE101443_RAW")
## Load packages
library('lumi')
library('wateRmelon')
library('ChAMPdata')
methyldata <- readEPIC(getwd())
ID <- c('GSM2703232','GSM2703233', 'GSM2703234', 'GSM2703235', 'GSM2703236','GSM2703237', 'GSM2703238', 'GSM2703239')
condition <- c('Tumour_A','Normal_A','Tumour_B','Normal_B','Tumour_C','Normal_C','Tumour_D','Normal_D')
Patient <- c('A','A','B','B','C','C','D','D')
annotation <- data.frame(ID,condition,Patient)
## Change sampleNames to something more comprehensible
sampleNames(methyldata) <- annotation[,2]
sampleNames(methyldata)
## Remove NA values
methyldata <- methyldata[!(rowSums(is.na(exprs(methyldata)))>=1),]
methyldata
## Remove probes for which calling p-value is insufficient
methyldata.pf<-pfilter(methyldata) # removes the probes which we are not sure that are called correctly
## Comparison of average methylation between control and tumor samples
boxplot(betas(methyldata),las=2)
## Perform normalization including dye color adjustment
methyldata.dasen.pf <- dasen(methyldata.pf)
## Make methylumi objects to check density and color bias adjustment
#transform both the non-normalized counts as the normalized counts to a MethyLumiM object
methyldataM <- as(methyldata.pf, 'MethyLumiM')
methyldataN <- as(methyldata.dasen.pf, 'MethyLumiM')
## Build design and contrasts
condition <- factor(as.character(c('Tumour','Normal','Tumour','Normal','Tumour','Normal','Tumour','Normal')))
patient <- factor(annotation$Patient)
design2 <- model.matrix(~0+condition+patient)
colnames(design2)[1:2] <- c("Control","Tumor")
design2
cont.matrix2 <- makeContrasts(TumourvsControl=Tumor-Control,levels=design2)
## Limma
fit_2 <- lmFit(methyldataN,design2) # normalized data
fit_2 <- contrasts.fit(fit_2,cont.matrix2)
fit_2 <- eBayes(fit_2)
LIMMAout_2 <- topTable(fit_2,adjust="BH",number=nrow(exprs(methyldata)))
LIMMAout_2
dim(LIMMAout_2[LIMMAout_2$adj.P.Val <= 0.0615913,]) # 1786
LIMMAout_2[LIMMAout_2$adj.P.Val <= 0.0615913,]
save(LIMMAout_2[LIMMAout_2$adj.P.Val <= 0.0615913,],file="methylation_all_pvalues.Rda")
adj_pvalues <- LIMMAout_2[LIMMAout_2$adj.P.Val <= 0.0615913,]
save(adj_pvalues,file="methylation_all_pvalues.Rda")
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
load('methylation_all_pvalues.Rda')
load("adjusted_pvalues_annotation_transcription.Rda") # adjusted pvalues
dim(adjusted_pvalues)
dim(adj_pvalues)
adj_pvalues$Gene
adj_pvalues
## Load packages
library('lumi')
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/methylation/GSE101443_RAW")
## Load packages
library('lumi')
library('wateRmelon')
library('ChAMPdata')
methyldata <- readEPIC(getwd())
ID <- c('GSM2703232','GSM2703233', 'GSM2703234', 'GSM2703235', 'GSM2703236','GSM2703237', 'GSM2703238', 'GSM2703239')
condition <- c('Tumour_A','Normal_A','Tumour_B','Normal_B','Tumour_C','Normal_C','Tumour_D','Normal_D')
Patient <- c('A','A','B','B','C','C','D','D')
annotation <- data.frame(ID,condition,Patient)
## Change sampleNames to something more comprehensible
sampleNames(methyldata) <- annotation[,2]
sampleNames(methyldata)
## Remove NA values
methyldata <- methyldata[!(rowSums(is.na(exprs(methyldata)))>=1),]
methyldata
## Remove probes for which calling p-value is insufficient
methyldata.pf<-pfilter(methyldata) # removes the probes which we are not sure that are called correctly
## Perform normalization including dye color adjustment
methyldata.dasen.pf <- dasen(methyldata.pf)
## Make methylumi objects to check density and color bias adjustment
#transform both the non-normalized counts as the normalized counts to a MethyLumiM object
methyldataM <- as(methyldata.pf, 'MethyLumiM')
methyldataN <- as(methyldata.dasen.pf, 'MethyLumiM')
## Build design and contrasts
condition <- factor(as.character(c('Tumour','Normal','Tumour','Normal','Tumour','Normal','Tumour','Normal')))
patient <- factor(annotation$Patient)
design2 <- model.matrix(~0+condition+patient)
colnames(design2)[1:2] <- c("Control","Tumor")
design2
cont.matrix2 <- makeContrasts(TumourvsControl=Tumor-Control,levels=design2)
## Limma
fit_2 <- lmFit(methyldataN,design2) # normalized data
fit_2 <- contrasts.fit(fit_2,cont.matrix2)
fit_2 <- eBayes(fit_2)
LIMMAout_2 <- topTable(fit_2,adjust="BH",number=nrow(exprs(methyldata)))
LIMMAout_2
## Load annotation and sort alphabetically on probe name
#https://www.bioconductor.org/packages/devel/data/experiment/manuals/ChAMPdata/man/ChAMPdata.pdf
data("probe.features")
annotation_MA <- probe.features
print(head(annotation_MA))
annotation_MA <- annotation_MA[sort(rownames(annotation_MA),index.return=T)$ix,]
## Check if all probes are present in both sets
dim(LIMMAout_2)
dim(annotation_MA) # annotation has more rows than Limma output
sum(LIMMAout_2$Probe_ID%in%rownames(annotation_MA))
sum(rownames(annotation_MA)%in%LIMMAout_2$Probe_ID)
## Since more probes are present in the annotation file, remove unnecessary probes
annotation_MA <- annotation_MA[rownames(annotation_MA)%in%LIMMAout_2$Probe_ID,]
dim(annotation_MA)
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted_2 <- LIMMAout_2[sort(LIMMAout_2$Probe_ID,index.return=T)$ix,]
## Add gene names to LIMMA output
LIMMAout_sorted_2$Gene <- annotation_MA$gene
LIMMAout_sorted_2$Feature <- annotation_MA$feature
LIMMAout_sorted_2$Chrom <- annotation_MA$CHR
LIMMAout_sorted_2$Pos <- annotation_MA$MAPINFO
LIMMAout_sorted_2$Chrom <- as.character(LIMMAout_sorted$Chrom)
LIMMAout_sorted_2$Gene <- as.character(LIMMAout_sorted$Gene)
LIMMAout_sorted_2$Feature <- as.character(LIMMAout_sorted$Feature)
## Since more probes are present in the annotation file, remove unnecessary probes
annotation_MA <- annotation_MA[rownames(annotation_MA)%in%LIMMAout_2$Probe_ID,]
dim(annotation_MA)
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted_2 <- LIMMAout_2[sort(LIMMAout_2$Probe_ID,index.return=T)$ix,]
## Add gene names to LIMMA output
LIMMAout_sorted_2$Gene <- annotation_MA$gene
LIMMAout_sorted_2$Feature <- annotation_MA$feature
LIMMAout_sorted_2$Chrom <- annotation_MA$CHR
LIMMAout_sorted_2$Pos <- annotation_MA$MAPINFO
LIMMAout_sorted_2$Chrom <- as.character(LIMMAout_sorted$Chrom)
LIMMAout_sorted_2$Gene <- as.character(LIMMAout_sorted$Gene)
LIMMAout_sorted_2$Feature <- as.character(LIMMAout_sorted$Feature)
## Add gene names to LIMMA output
LIMMAout_sorted_2$Gene <- annotation_MA$gene
LIMMAout_sorted_2$Feature <- annotation_MA$feature
LIMMAout_sorted_2$Chrom <- annotation_MA$CHR
LIMMAout_sorted_2$Pos <- annotation_MA$MAPINFO
LIMMAout_sorted_2$Chrom <- as.character(LIMMAout_sorted$Chrom)
LIMMAout_sorted_2$Chrom <- as.character(LIMMAout_sorted_2$Chrom)
LIMMAout_sorted_2$Gene <- as.character(LIMMAout_sorted_2$Gene)
LIMMAout_sorted_2$Feature <- as.character(LIMMAout_sorted_2$Feature)
# The data type for these columns is altered to prevent issues further downstream
LIMMAout_annot_2 <- LIMMAout_sorted_2[sort(LIMMAout_sorted_2$P.Value,index.return=T)$ix,c(1,12,13,10,11,4,7,8)]
LIMMAout_annot_2<- LIMMAout_annot_2[!LIMMAout_annot_2$Gene=="",]# filtering van de lege genes
LIMMAout_annot_2
dim(LIMMAout_annot_2[abs(LIMMAout_annot_2$logFC) > 2 & LIMMAout_annot_2$adj.P.Val <= 0.0615913,]) # we vinden 250 genen die significante differentiele methylatie hebben tumour vs control
dim(LIMMAout_annot_2[LIMMAout_annot_2$logFC > 2 & LIMMAout_annot_2$adj.P.Val <= 0.0615913,]) # 182
dim(LIMMAout_annot_2[LIMMAout_annot_2$logFC < (-2) & LIMMAout_annot_2$adj.P.Val <= 0.0615913,]) # 68
adj_pvalues <- LIMMAout_annot_2[LIMMAout_annot_2$adj.P.Val <= 0.0615913,]
dim(adj_pvalues)
head(adj_pvalues)
save(adj_pvalues,file="methylation_all_pvalues.Rda")
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
load('methylation_all_pvalues.Rda') # adj_pvalues
load("adjusted_pvalues_annotation_transcription.Rda") # adjusted pvalues
dim(significant_p_values) #250 8
dim(adjusted_pvalues) # 5028
dim(adj_pvalues) # 1786
head(adjusted_pvalues)
head(adj_pvalues)
adj_pvalues$Gene
sum(adj_pvalues$Gene%in%adjusted_pvalues$hgnc_symbol)
