}
meth_mean_tumour <- meth_mean_tumour[c(1,3,5,7)]
meth_mean_control <- meth_mean_control[c(2,4,6,8)]
t_test_res <- t.test(meth_mean_control,meth_mean_tumour,var.equal=F)
t_test_res
dat_boxplot <- data.frame(betas = c(meth_mean_control,meth_mean_control),
group = c('Tumour','Normal','Tumour','Normal','Tumour','Normal','Tumour','Normal'))
boxplot(betas~group,dat_boxplot,las=2)
## Perform normalization including dye color adjustment
methyldata.dasen.pf <- dasen(methyldata.pf)
## Make methylumi objects to check density and color bias adjustment
#transform both the non-normalized counts as the normalized counts to a MethyLumiM object
methyldataM <- as(methyldata.pf, 'MethyLumiM')
methyldataN <- as(methyldata.dasen.pf, 'MethyLumiM')
annotation <- data.frame(ID,condition)
annotation
Patient <- c('A','A','B','B','C','C','D','D')
annotation <- data.frame(ID,condition,Patient)
annotation
## Perform normalization including dye color adjustment
methyldata.dasen.pf <- dasen(methyldata.pf)
## Make methylumi objects to check density and color bias adjustment
#transform both the non-normalized counts as the normalized counts to a MethyLumiM object
methyldataM <- as(methyldata.pf, 'MethyLumiM')
methyldataN <- as(methyldata.dasen.pf, 'MethyLumiM')
## Build design and contrasts
des <- factor(as.character(c('Tumour','Normal','Tumour','Normal','Tumour','Normal','Tumour','Normal')))
des
factor(annotation$Patient)
## Build design and contrasts
condition <- factor(as.character(c('Tumour','Normal','Tumour','Normal','Tumour','Normal','Tumour','Normal')))
Patient <- factor(annotation$Patient)
patient <- factor(annotation$Patient)
design <- model.matrix(~0+condition+patient)
design
colnames(design)[1:2] <- c("Normal","Tumor")
design
colnames(design)[1:2] <- c("Control","Tumor")
cont.matrix <- makeContrasts(NvsS=Tumor-Control,levels=design)
## Limma
fit <- lmFit(methyldataN,design) # normalized data
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(methyldata)))
head(LIMMAout)
## Check M-values for top results
exprs(methyldataN)[rownames(methyldataN)%in%rownames(head(LIMMAout)),]
## Load annotation and sort alphabetically on probe name
#https://www.bioconductor.org/packages/devel/data/experiment/manuals/ChAMPdata/man/ChAMPdata.pdf
data("probe.features") # this one?
annotation_MA <- probe.features
print(head(annotation_MA))
annotation_MA <- annotation_MA[sort(rownames(annotation_MA),index.return=T)$ix,]
## Check if all probes are present in both sets
dim(LIMMAout)
dim(annotation_MA)
sum(LIMMAout$Probe_ID%in%rownames(annotation_MA))
sum(rownames(annotation_MA)%in%LIMMAout$Probe_ID)
## Since more probes are present in the annotation file, remove unnecessary probes
annotation_MA <- annotation_MA[rownames(annotation_MA)%in%LIMMAout$Probe_ID,]
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(LIMMAout$Probe_ID,index.return=T)$ix,]
## Add gene names to LIMMA output
LIMMAout_sorted$Gene <- annotation_MA$gene
LIMMAout_sorted$Feature <- annotation_MA$feature
LIMMAout_sorted$Chrom <- annotation_MA$CHR
LIMMAout_sorted$Pos <- annotation_MA$MAPINFO
LIMMAout_sorted$Chrom <- as.character(LIMMAout_sorted$Chrom)
LIMMAout_sorted$Gene <- as.character(LIMMAout_sorted$Gene)
LIMMAout_sorted$Feature <- as.character(LIMMAout_sorted$Feature)
# The data type for these columns is altered to prevent issues further downstream
LIMMAout_annot <- LIMMAout_sorted[sort(LIMMAout_sorted$P.Value,index.return=T)$ix,c(1,12,13,10,11,4,7,8,5)]
# Sort on p-values to prevent errors in sorting due to equal FDR values
LIMMAout_annot
# Sort on p-values to prevent errors in sorting due to equal FDR values
LIMMAout_annot
head(LIMMAout)
## Build design and contrasts
condition <- factor(as.character(c('Tumour','Normal','Tumour','Normal','Tumour','Normal','Tumour','Normal')))
patient <- factor(annotation$Patient)
design <- model.matrix(~0+condition+patient)
colnames(design)[1:2] <- c("Control","Tumor")
cont.matrix <- makeContrasts(NvsS=Tumor-Control,levels=design)
## Limma
fit <- lmFit(methyldataN,design) # normalized data
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(methyldata)))
head(LIMMAout)
design <- model.matrix(~0+condition)
colnames(design)[1:2] <- c("Control","Tumor")
cont.matrix <- makeContrasts(NvsS=Tumor-Control,levels=design)
## Limma
fit <- lmFit(methyldataN,design) # normalized data
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(methyldata)))
head(LIMMAout)
design <- model.matrix(~0+condition*patient)
colnames(design)[1:2] <- c("Control","Tumor")
cont.matrix <- makeContrasts(NvsS=Tumor-Control,levels=design)
## Limma
fit <- lmFit(methyldataN,design) # normalized data
fit2 <- contrasts.fit(fit,cont.matrix)
## Build design and contrasts
condition <- factor(as.character(c('Tumour','Normal','Tumour','Normal','Tumour','Normal','Tumour','Normal')))
patient <- factor(annotation$Patient)
design <- model.matrix(~0+condition*patient)
design
colnames(design)[1:2] <- c("Control","Tumor")
cont.matrix <- makeContrasts(NvsS=Tumor-Control,levels=design)
design
cont.matrix <- makeContrasts(NvsS=Tumor-Control,levels=design)
design <- model.matrix(~0+condition+patient)
colnames(design)[1:2] <- c("Control","Tumor")
cont.matrix <- makeContrasts(NvsS=Tumor-Control,levels=design)
## Limma
fit <- lmFit(methyldataN,design) # normalized data
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(methyldata)))
head(LIMMAout)
design <- model.matrix(~0+condition)
colnames(design)[1:2] <- c("Control","Tumor")
cont.matrix <- makeContrasts(NvsS=Tumor-Control,levels=design)
## Limma
fit <- lmFit(methyldataN,design) # normalized data
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(methyldata)))
head(LIMMAout)
# nu met Patient erbij
design2 <- model.matrix(~0+condition+patient)
colnames(design2)[1:2] <- c("Control","Tumor")
cont.matrix2 <- makeContrasts(NvsS=Tumor-Control,levels=design2)
## Limma
fit_2 <- lmFit(methyldataN,design2) # normalized data
fit_2 <- contrasts.fit(fit_2,cont.matrix2)
fit_2 <- eBayes(fit_2)
LIMMAout_2 <- topTable(fit_2,adjust="BH",number=nrow(exprs(methyldata)))
head(LIMMAout_2)
sum(LIMMAout_2$adj.P.Val==0.0615913)
sum(LIMMAout_2$adj.P.Val=='0.0615913')
LIMMAout_2$adj.P.Val
LIMMAout_2$adj.P.Val[2000]
LIMMAout_2$adj.P.Val[10000]
LIMMAout_2$adj.P.Val[30000]
LIMMAout_2$adj.P.Val[448000]
LIMMAout_2$adj.P.Val[40000]
sum(LIMMAout_2$adj.P.Val<=0.0615913)
significant_p_values <- [LIMMAout_2$adj.P.Val<=0.0615913,]
significant_p_values <- LIMMAout_2[LIMMAout_2$adj.P.Val<=0.0615913,]
significant_p_values
annotation_MA <- probe.features
print(head(annotation_MA))
annotation_MA <- annotation_MA[sort(rownames(annotation_MA),index.return=T)$ix,]
## Check if all probes are present in both sets
dim(LIMMAout)
dim(annotation_MA)
sum(LIMMAout$Probe_ID%in%rownames(annotation_MA))
sum(rownames(annotation_MA)%in%LIMMAout$Probe_ID)
## Since more probes are present in the annotation file, remove unnecessary probes
annotation_MA <- annotation_MA[rownames(annotation_MA)%in%LIMMAout$Probe_ID,]
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(LIMMAout$Probe_ID,index.return=T)$ix,]
## Add gene names to LIMMA output
LIMMAout_sorted$Gene <- annotation_MA$gene
LIMMAout_sorted$Feature <- annotation_MA$feature
LIMMAout_sorted$Chrom <- annotation_MA$CHR
LIMMAout_sorted$Pos <- annotation_MA$MAPINFO
LIMMAout_sorted$Chrom <- as.character(LIMMAout_sorted$Chrom)
LIMMAout_sorted$Gene <- as.character(LIMMAout_sorted$Gene)
LIMMAout_sorted$Feature <- as.character(LIMMAout_sorted$Feature)
# The data type for these columns is altered to prevent issues further downstream
LIMMAout_annot <- LIMMAout_sorted[sort(LIMMAout_sorted$P.Value,index.return=T)$ix,c(1,12,13,10,11,4,7,8,5)]
# Sort on p-values to prevent errors in sorting due to equal FDR values
LIMMAout_annot
dim(LIMMAout2)
dim(LIMMAout_2)
## Check if all probes are present in both sets
dim(LIMMAout)
sum(LIMMAout_2$Probe_ID%in%rownames(annotation_MA))
sum(rownames(annotation_MA)%in%LIMMAout_2$Probe_ID)
sum(LIMMAout$Probe_ID%in%rownames(annotation_MA))
sum(rownames(annotation_MA)%in%LIMMAout$Probe_ID)
annotation_MA <- annotation_MA[rownames(annotation_MA)%in%LIMMAout_2$Probe_ID,]
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted_2 <- LIMMAout_2[sort(LIMMAout_2$Probe_ID,index.return=T)$ix,]
annotation_MA <- annotation_MA[rownames(annotation_MA)%in%LIMMAout_2$Probe_ID,]
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted_2 <- LIMMAout_2[sort(LIMMAout_2$Probe_ID,index.return=T)$ix,]
## Add gene names to LIMMA output
LIMMAout_sorted_2$Gene <- annotation_MA$gene
LIMMAout_sorted_2$Feature <- annotation_MA$feature
LIMMAout_sorted_2$Chrom <- annotation_MA$CHR
LIMMAout_sorted_2$Pos <- annotation_MA$MAPINFO
LIMMAout_sorted_2$Chrom <- as.character(LIMMAout_sorted$Chrom)
LIMMAout_sorted_2$Gene <- as.character(LIMMAout_sorted$Gene)
LIMMAout_sorted_2$Feature <- as.character(LIMMAout_sorted$Feature)
# The data type for these columns is altered to prevent issues further downstream
LIMMAout_annot_2 <- LIMMAout_sorted_2[sort(LIMMAout_sorted_2$P.Value,index.return=T)$ix,c(1,12,13,10,11,4,7,8,5)]
# Sort on p-values to prevent errors in sorting due to equal FDR values
LIMMAout_annot_2
sum(LIMMAout_annot_2$adj.P.Val<=0.0615913)
significant_p_values <- LIMMAout_annot_2[LIMMAout_annot_2$adj.P.Val<=0.0615913,]
significant_p_values
subset
load("Significant_output_annotation_transcription.Rda")
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
load("Significant_output_annotation_transcription.Rda")
output_sign
output_sign$hgnc_symbol%in%significant_p_values$Gene
output_sign[output_sign$hgnc_symbol%in%significant_p_values$Gene,]
dim(significant_p_values[significant_p_values$Gene%in%output_sign$hgnc_symbol,])
dim(output_sign[output_sign$hgnc_symbol%in%significant_p_values$Gene,])
output_1 <- significant_p_values[significant_p_values$Gene%in%output_sign$hgnc_symbol,]
output_2 <- output_sign[output_sign$hgnc_symbol%in%significant_p_values$Gene,]
output_1
output_2
significant_p_values$Gene
is.NA(significant_p_values$Gene)
is.na(significant_p_values$Gene)
significant_p_values$Gene==""
significant_p_values[!significant_p_values$Gene=="",]
output[!output$Gene=="",]
output_sign[!output$Gene=="",]
output$Gene==""
output_sign[!output_sign$Gene=="",]
output_sign$Gene==""
output_sign$Gene
output_sign[!output_sign$hgnc_symbol=="",]
significant_p_values <- significant_p_values[!significant_p_values$Gene=="",] # eerst alle lege genen eruit halen
output_sign <- output_sign[!output_sign$hgnc_symbol=="",]
dim(significant_p_values[significant_p_values$Gene%in%output_sign$hgnc_symbol,])
dim(output_sign[output_sign$hgnc_symbol%in%significant_p_values$Gene,])
dim(significant_p_values)
dim(output_sign)
output_1 <- significant_p_values[significant_p_values$Gene%in%output_sign$hgnc_symbol,]
output_2 <- output_sign[output_sign$hgnc_symbol%in%significant_p_values$Gene,]
dim(output_1)
dim(output_2)
output_1
output_2
output_1$Gene%in%output_2$hgnc_symbol
output_2$hgnc_symbol%in%output_1$Gene
output_1
output_2
output_1
setwd("~/Documents/Bioinformatics/Applied high-throughput analysis/project_AHTA/Transcription profiling of human breast tumors and their paired normal tissues")
# load in the expressionFeatureSet object
BreastCancer <- ArrayExpress("E-GEOD-15852")
## Reads in all .cel files and takes phenoData from the ExpressionFeatureset we loaded using https_ArrayExpress
BreastCancer <- ReadAffy(phenoData=pData(BreastCancer))
#pData returns the phenotypic data we loaded using ReadAffy
pData(BreastCancer)
# Preprocessing of the data
# rma function is used to perform background correction as well as quantile normalization
BreastCancerRMA<- affy::rma(BreastCancer,background=T)
annot <- factor(pData(BreastCancerRMA)[,7]) # normal breast tissue and breast tumor tissue
annot
length(annot) # 86
## Differential expression by SAM
annotb <- as.double(annot==annot[4]) # we want the breast tumor tissue to be one and the control to be zero
annotb
# the problem is we don't account for the persons but can we? bcs we have 86 samples? YES
pData(BreastCancerRMA)$Patients<- pData(BreastCancerRMA)$Hybridization.Name
pData(BreastCancerRMA)$Patients <- gsub('Normal', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients <- gsub('Cancer', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients <- gsub('T', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients <- gsub('N', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients <- gsub(' ', '',pData(BreastCancerRMA)$Patients)
pData(BreastCancerRMA)$Patients # this is column with patients every patient has to occur 2 times in this column
sum(grepl('BC0155', pData(BreastCancerRMA)$Patients))
sum(grepl('BC0117', pData(BreastCancerRMA)$Patients))
ID <- factor(pData(BreastCancerRMA)$Patients)
length(levels(ID))
## Differential expression by LIMMA
# why LIMMA? => Limma has more power than SAM
# Method as stated in limma package (no intercept, easy for simple model designs)
design <- model.matrix(~0+annot+ID)
colSums(design) # checking if this is correct
#patients toevoegen
colnames(design)[1:2]<-c("Cancer_breast_tissue","normal_breast_tissue")
fit <- lmFit(BreastCancerRMA,design)
cont.matrix <- makeContrasts(NvsS=Cancer_breast_tissue-normal_breast_tissue,levels=design)
fit2 <- contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(BreastCancerRMA)))
head(LIMMAout)
output_sign
load("Significant_output_annotation_transcription.Rda")
output_sign
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout)
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t",skip=17,fill=T)
print(tail(annotation_BC))
annotation_BC[100:105,]
annotation_BC <- annotation_BC[sort(annotation_BC$Composite.Element.Name,index.return=T)$ix,]
## Check if all probes are present in both sets
dim(annotation_BC)
dim(LIMMAout)
## Double check => "Assumption is the mother of all fuck up's ;)"
sum(annotation_BC$Composite.Element.Name==sort(rownames(LIMMAout)))
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(rownames(LIMMAout),index.return=T)$ix,]
## Add gene names to LIMMA output
LIMMAout_sorted$gene <- annotation_BC$Composite.Element.Database.Entry.ensembl.
LIMMAout_annot <- LIMMAout_sorted[sort(LIMMAout_sorted$adj.P.Val,index.return=T)$ix,]
LIMMAout_annot
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(rownames(LIMMAout),index.return=T)$ix,]
LIMMAout_sorted
dim(LIMMAout_sorted)
dim(output_sign)
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
significant_pvalues<- LIMMAout_annot[LIMMAout_annot$adj.P.Val<0.05,]
dim(significant_pvalues)
# Sort on p-values to prevent errors in sorting due to equal FDR values
LIMMAout_annot$Gene
# Sort on p-values to prevent errors in sorting due to equal FDR values
LIMMAout_annot_2
# Sort on p-values to prevent errors in sorting due to equal FDR values
LIMMAout_annot_2<- LIMMAout_annot_2[!LIMMAout_annot_2$Gene=="",]
LIMMAout_annot_2
save(LIMMAout_annot_2, file= "Significant_output_annotation_methylation.Rda")
head(LIMMAout)
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout)
significant_pvalues_1<- LIMMAout[LIMMAout$adj.P.Val<0.05,]
dim(significant_pvalues_1)
head(significant_pvalues_1)
tail(significant_pvalues_1)
dim(significant_pvalues_1)
load("Significant_output_annotation_transcription.Rda")
dim(output_sign)
## Load annotation and sort alphabetically on probe name
annotation_BC <- read.table("A-AFFY-33.adf.txt",header=T,sep="\t",skip=17,fill=T)
print(tail(annotation_BC))
annotation_BC[100:105,]
annotation_BC <- annotation_BC[sort(annotation_BC$Composite.Element.Name,index.return=T)$ix,]
## Check if all probes are present in both sets
dim(annotation_BC)
dim(LIMMAout)
## Double check => "Assumption is the mother of all fuck up's ;)"
sum(annotation_BC$Composite.Element.Name==sort(rownames(LIMMAout)))
## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(rownames(LIMMAout),index.return=T)$ix,]
dim(LIMMAout_sorted)
## Add gene names to LIMMA output
LIMMAout_sorted$gene <- annotation_BC$Composite.Element.Database.Entry.ensembl.
LIMMAout_annot <- LIMMAout_sorted[sort(LIMMAout_sorted$adj.P.Val,index.return=T)$ix,]
# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
significant_pvalues<- LIMMAout_annot[LIMMAout_annot$adj.P.Val<0.05,]
dim(significant_pvalues)
LIMMAout_annot
dim(LIMMAout_annot)
dim(significant_pvalues)
significant_pvalues$gene
significant_pvalues
rownames(significant_pvalues)
output_2
for i in rownames(significant_pvalues):
print(i)
for i in rownames(significant_pvalues):
print(i)
for i in rownames(significant_pvalues){
print(i)
}
for (i in rownames(significant_pvalues)){
print(i)
}
head(output_2)
DataFrame(significant_pvalues)
significant_pvalues<- DataFrame(significant_pvalues)
sort(output_2)
sort(significant_pvalues)
sort(rownames(significant_pvalues))
sort(output_2$affy_hg_u133_plus_2)
dim(output_2$affy_hg_u133_plus_2)
length(output_2$affy_hg_u133_plus_2)
length(significant_pvalues)
length(significant_pvalue)
dim(significant_pvalues)
dim(output_sign)
dim(output_sign[!output_sign$hgnc_symbol=="",])
dim(output_sign)
length(rownames(significant_pvalues)
)
significant_pvalues
output_sign
rownames(significant_p_values)[1]
significant_pvalues
rownames(significant_pvalues)
rownames(significant_pvalues)[1]
output_sign
sum(rownames(significant_pvalues)==output_sign$affy_hg_u133_plus_2[1])
significant_pvalues[rownames(significant_pvalues)==output_sign$affy_hg_u133_plus_2[1],]
significant_pvalues[rownames(significant_pvalues)==output_sign$affy_hg_u133_plus_2[1],]
?significant_pvalues
significant_pvalues$hgnc_symbol
significant_pvalues
significant_pvalues[rownames(significant_pvalues)==output_sign$affy_hg_u133_plus_2[1],]$hgnc_symbol<-output_sign$affy_hg_u133_plus_2[1,3]
significant_pvalues[rownames(significant_pvalues)==output_sign$affy_hg_u133_plus_2[1],]$hgnc_symbol<-output_sign[1,3]
significant_pvalues
significant_pvalues[,"hgnc_symbol"] <-NA
significant_pvalues
output_sign
significant_pvalues[,"chromosome_name"] <-NA
significant_pvalues[,"start_position"] <-NA
significant_pvalues[,"end_position"] <-NA
significant_pvalues
for (i in rownames(significant_pvalues)){
significant_pvalues$hgnc_symbol<- output_2[output_2$affy_hg_u133_plus_2==i,3]
significant_pvalues$chromosome_name<- output_2[output_2$affy_hg_u133_plus_2==i,4]
significant_pvalues$start_position<- output_2[output_2$affy_hg_u133_plus_2==i,5]
significant_pvalues$end_position<- output_2[output_2$affy_hg_u133_plus_2==i,6]
}
rownames(significant_pvalues)
output_2[output_2$affy_hg_u133_plus_2==1,3]
output_sign
significant_pvalues$hgnc_symbol<- output_sign[output_sign$affy_hg_u133_plus_2==1,3]
output_sign[output_sign$affy_hg_u133_plus_2==1,3]
output_sign[output_sign$affy_hg_u133_plus_2=='213965_s_at',3]
significant_pvalues
rownames(significant_pvalues)
rownames(significant_pvalues)=='213965_s_at'
sum(rownames(significant_pvalues)=='213965_s_at')
significant_pvalues[rownames(significant_pvalues)=='213965_s_at']$hgnc_symbol<-output_sign[output_sign$affy_hg_u133_plus_2=='213965_s_at',3]
significant_pvalues$hgnc_symbol[213965_s_at]
significant_pvalues[213965_s_at]
count=1
for (i in rownames(significant_pvalues)){
significant_pvalues$hgnc_symbol[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,3]
significant_pvalues$chromosome_name[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,4]
significant_pvalues$start_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,5]
significant_pvalues$end_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,6]
count=count+1
}
output_sign[output_sign$affy_hg_u133_plus_2=='213965_s_at',3]
significant_pvalues$hgnc_symbol[1]
significant_pvalues
output_sign$Gene
output_sign
output_sign[output_sign$hgnc_symbol==""]
output_sign[output_sign$hgnc_symbol=="",]
# filtering of the zero entries
output_sign<- output_sign[!output_sign$hgnc_symbol=="",]
count=1
for (i in rownames(significant_pvalues)){
significant_pvalues$hgnc_symbol[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,3]
significant_pvalues$chromosome_name[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,4]
significant_pvalues$start_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,5]
significant_pvalues$end_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,6]
count=count+1
}
output_sign <- output_sign[!output_sign$affy_hg_u133_plus_2=="",]
count=1
for (i in rownames(significant_pvalues)){
significant_pvalues$hgnc_symbol[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,3]
significant_pvalues$chromosome_name[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,4]
significant_pvalues$start_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,5]
significant_pvalues$end_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,6]
count=count+1
}
significant_pvalues
significant_pvalues[100:150,]
significant_pvalues[50:100,]
significant_pvalues[0:50,]
significant_pvalues[25:50,]
significant_pvalues[10:25,]
significant_pvalues[23:25,]
output_sign[output_sign$affy_hg_u133_plus_2=='211696_x_at',3]
output_sign[output_sign$affy_hg_u133_plus_2=='215695_s_at',3]
rownames(significant_pvalues)%in%output_sign$affy_hg_u133_plus_2
significant_pvalues[rownames(significant_pvalues)%in%output_sign$affy_hg_u133_plus_2,]
significant_pvalues <- significant_pvalues[rownames(significant_pvalues)%in%output_sign$affy_hg_u133_plus_2,]
count=1
for (i in rownames(significant_pvalues)){
significant_pvalues$hgnc_symbol[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,3]
significant_pvalues$chromosome_name[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,4]
significant_pvalues$start_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,5]
significant_pvalues$end_position[count] <- output_sign[output_sign$affy_hg_u133_plus_2==i,6]
count=count+1
}
significant_pvalues
save(significant_pvalues,file="Significant_output_annotation_transcription.Rda") # object noemt significant_pvalues
load("Significant_output_annotation_methylation.Rda") #LIMMAout_annot_2
load("Significant_output_annotation_transcription.Rda")# object noemt significant_pvalues
LIMMAout_annot_2
head(LIMMAout_annot_2)
head(significant_pvalues)
dim(LIMMAout_annot_2)
dim(significant_pvalues
dim(significant_pvalues)
dim(significant_pvalues)
tail(LIMMAout_annot_2)
# filtering op limma
LIMMAout_annot_2$adj.P.Val<=0.0615913
# filtering op limma
LIMMAout_annot <- LIMMAout_annot_2[LIMMAout_annot_2$adj.P.Val<=0.0615913,]
dim(LIMMAout_annot)
dim(significant_pvalues)
head(LIMMAout_annot)
head(significant_pvalues)
sum(LIMMAout_annot_2$Gene%in%significant_pvalues)
sum(LIMMAout_annot_2$Gene%in%significant_pvalues$hgnc_symbol)
sum(LIMMAout_annot$Gene%in%significant_pvalues$hgnc_symbol)
